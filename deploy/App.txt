<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Kanban Using Alternate Field-0.2.3</title>
    <!--  (c) 2020 Custom Agile.  All Rights Reserved. -->
    <!--  Build Date: Wed Jun 17 2020 17:01:06 GMT-0400 (Eastern Daylight Time) -->
    <!--  Repository: https://github.com/CustomAgile/portfolio-kanban-alternate-field -->
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Jun 17 2020 17:01:06 GMT-0400 (Eastern Daylight Time)";
        var CHECKSUM = 432897845961;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.override(Rally.ui.inlinefilter.FilterFieldFactory, {
    _getBaseEditorConfig: function (fieldDef, context) {
        if (fieldDef.name === "CreatedBy") {
            let editorConfig = {
                xtype: "rallyusersearchcombobox",
                fieldLabel: fieldDef.displayName,
                allowNoEntry: false,
                valueField: '_uuidRef',
                storeConfig: {
                    models: [fieldDef.attributeDefinition.AllowedValueType._refObjectName],
                    context: {
                        workspace: context.getDataContext().workspace,
                        project: null
                    }
                }
            };

            return editorConfig;
        }

        return this.callParent(arguments);
    }
});

Ext.override(Rally.ui.inlinefilter.InlineFilterPanel, {
    // We don't want chevrons in the tab panel
    _alignChevron: function () {
        if (this.chevron) { this.chevron.hide(); }
    },

    // Don't create the close buttons
    _createCloseButton: function () { }
});

Ext.override(Ext.form.field.ComboBox, {
    select: function (r) {
        if (r && !r.get('ObjectID') && r.get('_uuidRef') === '/allowedattributevalue/') {
            return;
        }
        this.callParent(arguments);
    }
});

Ext.override(Rally.ui.inlinefilter.QuickFilterPanel, {
    getFilters: function () {
        var filters = [];
        _.each(this.fields, function (field, index) {
            if (field.name === 'ModelType') {
                return;
            }

            if (!Ext.isEmpty(field.lastValue) && !field.hasActiveError()) {

                var lastValue = field.lastValue;

                var isRefUri = Rally.util.Ref.isRefUri(lastValue);
                var isRefOid = _.isNumber(Rally.util.Ref.getOidFromRef(lastValue));
                if (isRefUri && isRefOid && field.valueField === '_ref' && field.noEntryValue !== lastValue) {
                    var record = field.getRecord();
                    if (record) {
                        var uuidRef = record.get('_uuidRef');
                        if (uuidRef) {
                            lastValue = uuidRef;
                        }
                    }
                }

                var filter = _.isFunction(field.getFilter) ? field.getFilter() : Rally.data.wsapi.Filter.fromExtFilter({
                    property: field.name,
                    operator: field.operator,
                    value: lastValue
                });

                if (filter && filter.value !== '/allowedattributevalue/') {

                    if (field.allowNoEntry && field.noEntryValue === lastValue) {
                        filter.value = null;
                    }

                    Ext.apply(filter, {
                        name: field.name,
                        rawValue: lastValue,
                        filterIndex: index + 1
                    });

                    filters.push(filter);
                }
            }
        }, this);
        return filters;
    }
});
Ext.define('CustomAgile.multilevelfilter.ToggleButton', {
    extend: 'Rally.ui.Button',
    alias: 'widget.multifiltertogglebtn',

    stateful: true,

    config: {
        iconCls: 'icon-filter'
    },

    constructor: function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    getState: function () {
        return {
            filtersHidden: this.filtersHidden
        };
    },

    setFiltersHidden: function (filtersHidden) {
        this.filtersHidden = filtersHidden;
        this.saveState();
    }
});
Ext.define('CustomAgile.ui.tutorial.MultiLevelFilterTutorial', {
    singleton: true,

    welcomeHtml: `
        <h3>This component enables filters to be applied to user stories and all levels within the portfolio item hierarchy, regardless of the artifact 
        type displayed in the app.</h3>

        <h3><b>Note:</b> For grid apps that allow expanding individual rows to see child artifacts, these filters are only applied to the top-level artifact type. 
        Child artifacts will not be filtered.</h3>
    `,

    defaultOffset: [
        { x: 0, y: 0 },
        { x: 0, y: 0 },
        { x: 0, y: 0 },
        { x: 0, y: 0 }
    ],

    defaultChevronOffset: [
        { x: 0, y: -14 },
        { x: 14, y: 0 },
        { x: 0, y: 14 },
        { x: -8, y: 0 }
    ],

    showWelcomeDialog: function (app) {
        this.app = app;
        this.steps = this.getSteps();

        if (this.app.showFiltersBtn && this.app.showFiltersBtn.filtersHidden) {
            this.app._toggleFilters(this.app.showFiltersBtn);
        }

        let appHeight = Rally.getApp().getHeight() - 25;

        this.welcomeDialog = Ext.create('Rally.ui.dialog.Dialog', {
            autoShow: true,
            layout: 'fit',
            componentCls: 'rly-popover dark-container',
            width: 500,
            height: appHeight < 300 ? appHeight : 300,
            closable: true,
            autoDestroy: true,
            buttonAlign: 'center',
            autoScroll: true,
            title: 'Using the Multi-Level Filter',
            items: {
                xtype: 'component',
                html: this.welcomeHtml,
                padding: 10,
                style: 'font-size:12px;'
            },
            buttons: [
                {
                    xtype: "rallybutton",
                    text: 'Close',
                    cls: 'secondary rly-small',
                    listeners: {
                        click: () => {
                            this.welcomeDialog.close();
                        },
                        scope: this
                    }
                }, {
                    xtype: "rallybutton",
                    text: 'Next',
                    cls: 'primary rly-small',
                    listeners: {
                        click: function () {
                            this.showNextStep(0);
                            this.welcomeDialog.close();
                        },
                        scope: this
                    }
                }
            ]
        });
    },

    showNextStep: function (stepIndex) {
        if (this.popover) {
            Ext.destroy(this.popover);
        }

        if (stepIndex >= this.steps.length) {
            return;
        }

        if (stepIndex === -1) {
            this.showWelcomeDialog(this.app);
            return;
        }

        let currentStep = this.steps[stepIndex];

        if (currentStep.handler) {
            currentStep.handler();
        }

        let buttons = [{
            xtype: "rallybutton",
            text: 'Close',
            cls: 'secondary rly-small',
            listeners: {
                click: () => {
                    this.popover.close();
                },
                scope: this
            }
        }];

        buttons.push({
            xtype: "rallybutton",
            text: 'Previous',
            cls: 'primary rly-small',
            listeners: {
                click: function () {
                    this.showNextStep(stepIndex - 1);
                },
                scope: this
            }
        });

        if (stepIndex < this.steps.length - 1) {
            buttons.push({
                xtype: "rallybutton",
                text: 'Next',
                cls: 'primary rly-small',
                listeners: {
                    click: function () {
                        this.showNextStep(stepIndex + 1);
                    },
                    scope: this
                }
            });
        }

        let appHeight = Rally.getApp().getHeight() - 25;

        this.popover = Ext.create('Rally.ui.popover.Popover', {
            target: Rally.getApp().down(currentStep.target).getEl(),
            placement: currentStep.placement || ['bottom', 'left', 'top', 'right'],
            chevronOffset: currentStep.chevronOffset || this.defaultChevronOffset,
            offsetFromTarget: currentStep.offset || this.defaultOffset,
            overflowY: 'auto',
            maxWidth: 550,
            maxHeight: appHeight < 700 ? appHeight : 700,
            toFront: Ext.emptyFn,
            buttonAlign: 'center',
            title: currentStep.title,
            listeners: {
                destroy: function () {
                    this.popover = null;
                },
                scope: this
            },
            html: `<div class="tutorial-popover-body">${currentStep.html}</div>`,
            buttons
        });
    },

    getSteps: function () {
        let steps = [];

        if (this.app.publisher) {
            steps.push({
                target: '#pubSubIndicatorArea',
                placement: 'right',
                title: 'Broadcaster Indicator',
                offset: [
                    { x: 0, y: 0 },
                    { x: 0, y: 0 },
                    { x: 14, y: 0 },
                    { x: 0, y: 0 }
                ],
                chevronOffset: [
                    { x: 0, y: -14 },
                    { x: 14, y: -40 },
                    { x: 0, y: 14 },
                    { x: -8, y: 0 }
                ],
                html: `
           <p><span class="icon-bullhorn icon-large"></span> This bullhorn icon indicates that the app is broadcasting the selected filters to any apps on the page
         that are listening for filter changes.</p>
            `
            });
        }

        if (this.app._showAncestorFilter()) {
            steps.push({
                target: '#ancestorFilterArea',
                placement: 'bottom',
                title: 'Ancestor Filter',
                html: `
         <p>The ancestor filter allows you to filter the data to show only artifacts that are descendants of the selected artifact. 
         Use the PI Type dropdown to choose which type of Portfolio Item you want the ancestor artifact to be.</p> 
            `
            });
        }

        if (this.app._showIgnoreProjectScopeControl()) {
            let scopeOffsetX = this.app._showAncestorFilter() ? 0 : -250;
            steps.push({
                target: '#ignoreScopeControl',
                placement: 'bottom',
                title: 'Scope Control',
                offset: [
                    { x: 0, y: 0 },
                    { x: 0, y: 0 },
                    { x: 0, y: 15 },
                    { x: 0, y: 0 }
                ],
                chevronOffset: [
                    { x: 0, y: -14 },
                    { x: 14, y: 0 },
                    { x: scopeOffsetX, y: 14 },
                    { x: -8, y: 0 }
                ],
                html: `
           <p>This dropdown controls whether the filters and resulting data will be scoped to the current project (Obeying the user's 
        Project Scope Down and Project Scope Up settings) or scoped across all projects within the workspace.</p>
        <p>Depending upon the app and the filters, scoping across all projects may result in performance issues or timeout errors from the server. To ensure 
        timely performance, use filters that will return a manageable number of results.</p>
            `
            });
        }

        let buttonOffsetX = !this.app._showAncestorFilter() && !this.app._showIgnoreProjectScopeControl() ? -225 : 0;

        steps.push({
            target: 'multifiltertogglebtn',
            placement: 'bottom',
            title: 'Hide/Clear/Apply Filter Buttons',
            offset: [
                { x: 0, y: 0 },
                { x: 0, y: 0 },
                { x: 0, y: 14 },
                { x: 0, y: 0 }
            ],
            chevronOffset: [
                { x: 0, y: -14 },
                { x: 14, y: 0 },
                { x: buttonOffsetX, y: 14 },
                { x: -8, y: 0 }
            ],
            html: `
           <ul class="filter-help-list">
        <li><b>Show/Hide Filters: </b>Used to toggle the visibility of the filter controls. Use this to hide the filters if they're 
        not needed or more space is needed within the app</li>
        
        <li><b>Clear Filters: </b>Once at least 1 filter is applied, this button will appear. This button will clear all of the quick filters and advanced filters across all artifact types. 
        Upon clearing the filters, the app will refresh its data.</li>
        
        <li><b>Apply Filters: </b>If present, this button becomes active after a single change is made to one of the filters. This button 
        allows the user to make multiple changes without the app refreshing after each change. Once the user has modified all of 
        the necessary filters, clicking this button will apply it to the app and refresh the data. If this button is not present, 
        the app will refresh after each change made to the filters.</li>
        </ul>
            `
        },
            {
                target: '#multiLevelFilterTabPanel tabbar tab',
                placement: 'bottom',
                title: 'Artifact Type Tabs',
                offset: [
                    { x: 0, y: 0 },
                    { x: 0, y: 0 },
                    { x: 0, y: 14 },
                    { x: 0, y: 0 }
                ],
                chevronOffset: [
                    { x: 0, y: -14 },
                    { x: 14, y: 0 },
                    { x: -25, y: 14 },
                    { x: -8, y: 0 }
                ],
                html: `
           <p>Each tab contains a unique filter that will apply filters at the level of the specified artifact type. 
        If the tab title ends with a number in parenthesis, this indicates the current number of filters applied at that level.</p>
            `
            },
            {
                target: '#' + this.app.btnRenderAreaId,
                placement: 'bottom',
                title: 'Errors',
                chevronOffset: [
                    { x: 0, y: -14 },
                    { x: 14, y: 0 },
                    { x: 0, y: 28 },
                    { x: -8, y: 0 }
                ],
                html: `
            <h4><i>One of the filters is trying to return too many records and would result in timeouts...</i></h4>
        <ul>
        <li>Often times, when using filters on artifact types above or below the artifact type displayed within the app, it's necessary 
        to first fetch those artifacts at that level in order to properly apply the filters. If the number of artifacts fitting those 
        filters is too large, it's too slow or impossible to retrieve all of them in order to then use them as filters afterwards.
        <br><br>
        <b>Example: </b>
        Using a grid to display Features across all projects. We only want to see Features that have User Stories that are blocked. 
        Since there's no way to directly search for Features containing blocked stories, we must first find all blocked stories so we can 
        build a list of Features that are tied to those stories. And since we're scoping across all projects, we must query for all blocked 
        stories across the workspace. The results would be over ten thousand records, which would take very long to load, or would fail 
        to load due to timeout errors. This is an example of when we would see this error. Using more specific filters, or scoping to a specific 
        project hierarchy would solve this issue.
        </li>
        </ul>
            `
            });

        return steps;
    }
});
Ext.define('Utils.AncestorPiAppFilter', {
    alias: 'plugin.UtilsAncestorPiAppFilter',
    version: "1.3.4",
    mixins: [
        'Ext.AbstractPlugin',
        'Rally.Messageable'
    ],
    extend: 'Ext.Component',

    statics: {
        RENDER_AREA_ID: 'utils-ancestor-pi-app-filter',
        PANEL_RENDER_AREA_ID: 'multi-level-pi-app-filter-panel'
    },

    config: {
        /**
         * @cfg {Boolean}
         * The id of the component where the plugin will render its controls
         */
        renderAreaId: 'utils-ancestor-pi-app-filter',

        /**
         * @cfg {String}
         * The id of the component where the filter button will render itself
         */
        btnRenderAreaId: 'utils-ancestor-pi-app-filter',

        /**
         * @cfg {String}
         * The id of the component where the tabbed filter panel will render itself
         */
        panelRenderAreaId: 'multi-level-pi-app-filter-panel',

        /**
         * @cfg {Boolean}
         * Set to true to show multilevel filter by default
         */
        displayMultiLevelFilter: false,

        /**
         * @cfg {String}
         * Choose default setting for project scope
         * Possible values: current, workspace, user
         */
        projectScope: 'user',

        /**
         * @cfg {Boolean}
         * Set to true to indicate that this component is a publisher of events
         * to other apps using this plugin
         */
        publisher: false,

        /**
         * @cfg {Boolean}
         * Set to false to prevent the '-- None --' selection option if your app can't support
         * querying by a null ancestor (e.g. Lookback _ItemHierarchy)
         */
        allowNoEntry: true,

        /**
         * @cfg {Object}
         * Config applied to the app settings components
         */
        settingsConfig: {},

        /**
         * @cfg {Object}
         * Fetch list for PI Selector
         */
        defaultFetch: true,

        /**
         * @cfg {Array}
         * Whitelist array for inline filters. Used if app fails to retrieve global
         * whitelist or overrideGlobalWhitelist is set to true
         */
        whiteListFields: ['Tags', 'Milestones', 'c_EAEpic', 'c_EnterpriseApprovalEA', 'DisplayColor'],

        /**
         * @cfg {Boolean}
         * Set to true to specify custom whitelist array
         */
        overrideGlobalWhitelist: false,

        /**
         * @cfg {Array}
         * Blacklist array for inline filters
         */
        blackListFields: [],

        /**
         * @cfg {Boolean}
         * Setting for inlineFilterButtonConfig
         */
        filterChildren: false,

        /**
         * @cfg {String}
         * Label of the Portfolio Item Type picker
         */
        ancestorLabel: 'With ancestor',

        /**
         * @cfg {Number}
         * Width of the Portfolio Item Type picker label
         */
        ancestorLabelWidth: 110,

        /**
         * @cfg {String}
         * Label of the Portfolio Item Type picker when shown with the ancestor filter
         */
        ownerLabel: 'and owned by',

        /**
         * @cfg {String}
         * Label of the Portfolio Item Type picker when shown by itself
         */
        ownerOnlyLabel: 'Owned by',

        /**
         * @cfg {Number}
         * Width of the Portfolio Item Type picker label
         */
        ownerLabelWidth: 110,


        /**
         * @cfg {Number}
         * Style of the Portfolio Item Type picker label
         */
        labelStyle: 'font-size: medium',

        /**
         * @cfg {Number}
         * Minimum width for single row layout
         */
        singleRowMinWidth: 840,

        /**
         * @cfg {Array}
         * Field list for multi-level filter panel
         */
        defaultFilterFields: [],

        /**
         * @cfg {Boolean}
         * Set to true to hide filters on load
         */
        filtersHidden: false,

        /**
         * @cfg {Boolean}
         * Set to true to hide advanced filters on load
         */
        advancedFilterCollapsed: false,
        /**
         * @cfg {String}
         * Pass a typePath to set that PI type as the default visible tab
         */
        visibleTab: undefined,

        /**
         * @cfg {Boolean}
         * Set to true to prevent user from scoping app across the workspace
         * */
        disableGlobalScope: false
    },
    filterControls: [],
    portfolioItemTypes: [],
    readyDeferred: null,
    piTypesDeferred: null,
    isSubscriber: false,
    changeSubscribers: [],
    publishedValue: {},
    defaultTab: 0,

    constructor: function () {
        this.callParent(arguments);
        // this._addCancelLoad(); TODO - Future work
        this._setupPubSub();
        Ext.tip.QuickTipManager.init();
    },

    initComponent: function () {
        this.callParent(arguments);
        this.addEvents('ready', 'select', 'change');
    },

    init: function (cmp) {
        this.cmp = cmp;
        this.cmp.on('resize', this._onCmpResize, this);
        this.renderArea = this.cmp.down('#' + this.renderAreaId);
        this.btnRenderArea = this.cmp.down('#' + this.btnRenderAreaId);
        this.panelRenderArea = this.cmp.down('#' + this.panelRenderAreaId);

        // Extend app settings fields
        var cmpGetSettingsFields = this.cmp.getSettingsFields;
        this.cmp.getSettingsFields = function () {
            return this._getSettingsFields(cmpGetSettingsFields.apply(cmp, arguments));
        }.bind(this);

        // Extend app default settings fields
        var appDefaults = this.cmp.defaultSettings;
        appDefaults['Utils.AncestorPiAppFilter.enableAncestorPiFilter2'] = false;
        appDefaults['Utils.AncestorPiAppFilter.projectScope'] = this.projectScope;
        appDefaults['Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter'] = this.displayMultiLevelFilter;
        this.cmp.setDefaultSettings(appDefaults);

        // Add the control components then fire ready
        this._getGlobalWhitelist().then({
            scope: this,
            success: function (whitelist) {
                this.whiteListFields = whitelist;

                this._getTypeDefinitions().then({
                    scope: this,
                    success: function () {
                        Promise.all([this._addAncestorControls(), this._addFilters()]).then(
                            function () {
                                setTimeout(function () { this._setReady(); }.bind(this), 500);
                            }.bind(this),
                            function (error) {
                                this._showError(error, 'Failed while adding ancestor and multilevel filters');
                                this._setReady();
                            }.bind(this)
                        );
                    },
                    failure: function () {
                        this._showError('Failed to fetch portfolio item types for multi-level filter');
                    }
                });
            }
        });
    },

    // Attempt to load preference object specifying list of fields to whitelist
    _getGlobalWhitelist: function () {
        let def = Ext.create('Deft.Deferred');
        let prefName = 'multi-level-filter-whitelist-fields-preference-' + this.cmp.getContext().getWorkspaceRef();
        if (this.overrideGlobalWhitelist) {
            def.resolve(this.whiteListFields);
            return def.promise;
        }

        Rally.data.PreferenceManager.load({
            filterByName: prefName,
            scope: this,
            success: function (pref) {
                if (pref && pref.hasOwnProperty(prefName)) {
                    try {
                        let fields = pref[prefName].split(',');
                        if (fields && fields.length) {
                            def.resolve(fields);
                        }
                        else {
                            def.resolve(this.whiteListFields);
                        }
                    }
                    catch (e) {
                        def.resolve(this.whiteListFields);
                    }
                }
                else {
                    def.resolve(this.whiteListFields);
                }
            }
        });
        return def.promise;
    },

    _getTypeDefinitions: function () {
        let def = Ext.create('Deft.Deferred');

        Rally.data.util.PortfolioItemHelper.getPortfolioItemTypes().then({
            scope: this,
            success: function (piTypes) {
                this.portfolioItemTypes = piTypes;

                Ext.create('Rally.data.wsapi.Store', {
                    model: Ext.identityFn('TypeDefinition'),
                    fetch: ['Name', 'Ordinal', 'TypePath'],
                    requester: this,
                    filters: [{ property: 'Name', value: 'Hierarchical Requirement' }]
                }).load({
                    scope: this,
                    callback: function (records, operation, success) {
                        if (success) {
                            if (records && records.length) {
                                this.storyType = records[0];
                                this.allTypes = [this.storyType].concat(this.portfolioItemTypes);
                                def.resolve();
                            }
                            else { def.reject(); }
                        }
                        else { def.reject(); }
                    }
                });
            },
            failure: function () {
                def.reject();
            }
        });

        return def.promise;
    },

    notifySubscribers: function (changeType) {
        var data = this._getValue();
        data.changeType = changeType;
        _.each(this.changeSubscribers, function (subscriberName) {
            this.publish(subscriberName, data);
        }, this);
    },

    // Returns a filter that will ensure results are children of the
    // selected ancestor portfolio item. type is the TypeDefinition 
    // for the Portfolio Item level you wish to fetch.
    getAncestorFilterForType: function (type) {
        var filter;
        var modelName = type.toLowerCase();
        var currentValues = this._getValue();

        if (currentValues.piTypePath) {
            var selectedPiTypePath = currentValues.piTypePath;
            var selectedRecord = currentValues.isPiSelected;
            var selectedPi = currentValues.pi;
            var typesAbove = this._getAncestorTypeArray(modelName, selectedPiTypePath);
            if (selectedRecord && selectedPi !== null && typesAbove !== null) {
                var property = this._getPropertyPrefix(modelName, typesAbove);
                if (property) {
                    filter = new Rally.data.wsapi.Filter({
                        property: property,
                        value: selectedPi
                    });
                }
            }
            else if (selectedPi !== null) {
                // Filter out any items of this type because the ancestor pi filter is
                // enabled, but this type doesn't have any pi ancestor types
                filter = new Rally.data.wsapi.Filter({
                    property: 'ObjectID',
                    value: 0
                });
            }
        }
        return filter;
    },

    // Returns an array containing all of the filters applied in the
    // multi-level filter as well as the selected ancestor PI if one is selected. 
    // type is the TypeDefinition.TypePath for the Portfolio Item level you wish to fetch.
    getAllFiltersForType: async function (type, includeFiltersBelowType) {
        let ancestorFilter = this.getAncestorFilterForType(type);
        let filters = ancestorFilter ? [ancestorFilter] : [];
        let multiFilters = await this.getMultiLevelFiltersForType(type, includeFiltersBelowType);
        filters = filters.concat(multiFilters);

        return filters;
    },

    // Returns an array containing all of the filters applied in the multi-level filter for a given PI type. 
    // Type is the TypeDefinition.TypePath for the Portfolio Item level you wish to fetch.
    getMultiLevelFiltersForType: async function (type, includeFiltersBelowType) {
        let filters = [];
        let modelName = type.toLowerCase();
        let multiLevelFilters = this.getMultiLevelFilters();

        if (!multiLevelFilters || !Object.keys(multiLevelFilters).length) {
            return filters;
        }

        let keys = this._getAllTypePaths();
        let currentLevelIndex = _.findIndex(keys, function (currentType) {
            return currentType.toLowerCase() === modelName;
        });

        for (let i = currentLevelIndex; i < keys.length; i++) {
            let currentType = keys[i];
            let currentFilters = multiLevelFilters[currentType];

            if (currentFilters && currentFilters.length) {
                // If scoping all projects, filter releases by name instead of value
                // await this._convertReleaseFilters(currentFilters);

                // If we're at the given level, just add the filters
                if (modelName === currentType.toLowerCase()) {
                    filters = filters.concat(this._getWsapiFilter(modelName));
                }
                // If we're at a level above the given level, convert filters to fit given level
                else {
                    let parentFilters = await this._getParentFilters(modelName, currentType, currentFilters);
                    filters = filters.concat(parentFilters);
                }
            }
        }

        // If building a hierarchy from top level down, we don't need to include filters
        // below the given type (e.g. a timeline app). Otherwise if being used for an app
        // that only displays one PI type, we need to include those lower filters
        if (includeFiltersBelowType && Ext.String.startsWith(type.toLowerCase(), 'portfolioitem')) {
            let childFilters = this._getChildFiltersForType(type);
            if (childFilters) {
                filters = filters.concat(childFilters);
            }
        }

        return filters;
    },

    // Returns an array containing all of the filters applied to a specific PI level.
    // type is the TypeDefinition.TypePath for the Portfolio Item level you wish to fetch.
    getFiltersOfSingleType: async function (type) {
        return this._getWsapiFilter(type);
    },

    // Returns an object containing all of the filters applied in the multi-level
    // filter. Keys are the type definition field and the resulting values are arrays
    // of filters
    getMultiLevelFilters: function () {
        if (this._isSubscriber()) {
            return this.publishedValue.filters || {};
        }

        var filters = {};
        if (this.filterControls) {
            _.each(this.filterControls, function (filterControl) {
                let typeName = (filterControl.inlineFilterButton.modelNames) || 'unknown';
                filters[typeName] = filterControl.inlineFilterButton.getFilters();
            });
        }
        return filters;
    },

    getMultiLevelWsapiFilters: function () {
        if (this._isSubscriber()) {
            return this.publishedValue.wsapiFilters || {};
        }

        var filters = {};
        if (this.filterControls) {
            _.each(this.filterControls, function (filterControl) {
                let typeName = (filterControl.inlineFilterButton.modelNames) || 'unknown';
                filters[typeName] = filterControl.inlineFilterButton.getWsapiFilter();
            });
        }
        return filters;
    },

    // Return array of filters for all child levels below given type prefixed 
    // appropriately to filter at the given type
    _getChildFiltersForType: function (type) {
        let types = this._getAllTypePaths();
        let childProperty = '';
        let childFilters = [];

        let startIndex = _.findIndex(types, function (t) {
            return t.toLowerCase() === type.toLowerCase();
        });

        // Types are in order lowest to highest
        for (let i = startIndex - 1; i >= 0; i--) {
            let currentType = types[i];
            childProperty = childProperty + (childProperty.length ? '.' : '') + (currentType.toLowerCase() === 'hierarchicalrequirement' ? 'UserStories' : 'Children');
            childFilters = childFilters.concat(this._getWsapiFilter(currentType, childProperty));
        }

        return childFilters;
    },

    // Given a type, a parent type and array of parent filters, convert the filters
    // to apply to the given type
    // E.g.  (owner = /user/12345)   ->    (parent.parent.owner = /user/12345)
    _getParentFilters: async function (type, parentType, parentFilters) {
        let typesAbove = this._getAncestorTypeArray(type, parentType);

        if (typesAbove !== null) {
            let parentProperty = this._getPropertyPrefix(type, typesAbove);

            if (parentProperty) {
                let hasCustomFieldFilters = this._hasCustomFilters(parentFilters);
                let emptyFilter = [new Rally.data.wsapi.Filter({
                    property: parentProperty + '.ObjectID',
                    operator: '=',
                    value: 0
                })];

                // If filters on custom fields exist, lets get a list of IDs at that level and use those IDs as our filter
                // This is to overcome an issue with missing indices in Rally's database causing timeouts
                if (hasCustomFieldFilters && this.getIgnoreProjectScope()) {
                    let parentIDs = [];
                    try {
                        let currentLevelFilters = this._getWsapiFilter(parentType);
                        parentIDs = await new Promise(function (resolve, reject) { this._getFilteredRecords(currentLevelFilters, parentType, resolve, reject); }.bind(this)).catch((e) => {
                            this._showError(e, 'Failed while loading filters for parent artifacts');
                            return [];
                        });

                        if (parentIDs && parentIDs.length) {
                            return [new Rally.data.wsapi.Filter({
                                property: parentProperty + '.ObjectID',
                                operator: 'in',
                                value: _.map(parentIDs, function (id) { return id.get('ObjectID'); })
                            })];
                        }
                        else {
                            return emptyFilter;
                        }
                    }
                    catch (e) {
                        this._showError(e, 'Failed while loading filters for parent artifacts');
                        return emptyFilter;
                    }
                }
                else {
                    return this._getWsapiFilter(parentType, parentProperty);
                }
            }
        }
        return [];
    },

    // A user can apply a custom match condition to a set of inline filters.
    // This method returns the proper WSAPI filter object representing that
    // custom set of conditions. If parentPrefix is passed, the prefix is added to
    // the set of filters before returning
    _getWsapiFilter: function (model, parentPrefix) {
        let filter;
        if (this._isSubscriber()) {
            if (this.publishedValue.wsapiFilters) {
                for (let key in this.publishedValue.wsapiFilters) {
                    if (key.toLowerCase() === model.toLowerCase()) {
                        filter = this.publishedValue.wsapiFilters[key];
                        if (filter) {
                            filter = filter.clone();
                        }
                        break;
                    }
                }
            }
        }
        else {
            if (this.filterControls) {
                _.each(this.filterControls, function (filterControl) {
                    let typeName = filterControl.inlineFilterButton.modelNames || 'unknown';
                    if (typeName.toLowerCase() === model.toLowerCase()) {
                        filter = filterControl.inlineFilterButton.getWsapiFilter();
                        if (filter) {
                            filter = filter.clone();
                        }
                    }
                });
            }
        }

        if (filter) {
            this._updateWsapiDisplayColorFilter(filter);
            if (parentPrefix) {
                this._updateWsapiFilterWithPrefix(filter, parentPrefix);
            }
        }

        return filter ? [filter] : [];
    },

    // DisplayColor filter passes hex value as uppercase, but the web service needs
    // hex values to be lowercase in order to work properly
    _updateWsapiDisplayColorFilter: function (filter) {
        if (filter) {
            if (filter.property) {
                if (typeof filter.property === 'object') {
                    this._updateWsapiDisplayColorFilter(filter.property);
                }
            }

            if (typeof filter.value === 'object') {
                this._updateWsapiDisplayColorFilter(filter.value);
            }
            else if (typeof filter.value === 'string' && /^#[0-9a-f]{3,6}$/i.test(filter.value)) {
                filter.value = filter.value.toLowerCase();
            }
        }
    },

    // Recursively traverse through a Rally WSAPI filter and apply the given prefix to all of the values
    _updateWsapiFilterWithPrefix: function (filter, parentPrefix) {
        if (filter) {
            if (filter.property) {
                if (typeof filter.property === 'string') {
                    if (filter.config && filter.property === filter.config.property) {
                        filter.config.property = `${parentPrefix}.${filter.property}`;
                    }
                    if (filter.initialConfig && filter.property === filter.initialConfig.property) {
                        filter.initialConfig.property = `${parentPrefix}.${filter.property}`;
                    }
                    filter.property = `${parentPrefix}.${filter.property}`;
                }
                else {
                    this._updateWsapiFilterWithPrefix(filter.property, parentPrefix);
                }
            }

            if (typeof filter.value === 'object') {
                this._updateWsapiFilterWithPrefix(filter.value, parentPrefix);
            }
        }
    },

    // Rally has a hard time filtering on custom dropdown fields on parents (probably
    // not indexed) so we check to see if any are applied
    _hasCustomFilters: function (filters) {
        for (let filter of filters) {
            if (filter.property.indexOf('c_') !== -1 && typeof filter.value === 'string') {
                return true;
            }
        }
        return false;
    },

    // Takes an array of filters. If scoping across all projects, we need to update any release
    // filters to filter on the release name rather than the release value
    _convertReleaseFilters: async function (filters) {
        if (this.getIgnoreProjectScope()) {
            for (let i = 0; i < filters.length; i++) {
                if (filters[i].property === 'Release') {
                    let release = await this._getRelease(filters[i].value);
                    if (release) {
                        filters[i] = new Rally.data.wsapi.Filter({
                            property: 'Release.Name',
                            value: release.Name
                        });
                    }
                }
            }
        }
    },

    _getRelease: async function (releaseVal) {
        let deferred = Ext.create('Deft.Deferred');

        Ext.Ajax.request({
            url: Ext.String.format('/slm/webservice/v2.0{0}?fetch=Name', releaseVal),
            success(response) {
                if (response && response.responseText) {
                    let obj = Ext.JSON.decode(response.responseText);
                    if (obj && obj.Release) {
                        deferred.resolve(obj.Release);
                    }
                    else {
                        deferred.resolve(null);
                    }
                } else {
                    deferred.resolve(null);
                }
            }
        });

        return deferred.promise;
    },

    getSelectedPiRecord: function () {
        return this._getValue().piRecord;
    },

    getIgnoreProjectScope: function () {
        return !this.disableGlobalScope && this._getValue().ignoreProjectScope;
    },

    getCurrentView: function () {
        var ancestorData = this._getValue();
        // Delete piRecord to avoid recursive stack overflow error
        delete ancestorData.piRecord;
        return ancestorData;
    },

    setCurrentView: function (view) {
        let scopeControl = this.renderArea.down('#ignoreScopeControl');
        if (scopeControl && typeof view.ignoreProjectScope === 'boolean') {
            scopeControl.suspendEvents(false);
            scopeControl.setValue(view.ignoreProjectScope);
            scopeControl.resumeEvents();
        }

        this.setMultiLevelFilterStates(view.filterStates);

        if (view.piTypePath) {
            this._setPiSelector(view.piTypePath, view.pi);
        }
    },

    // Returns an object of states for all of the inline filters
    // Used for getting and setting shared views
    getMultiLevelFilterStates: function () {
        if (this._isSubscriber()) {
            return this.publishedValue.filterStates || {};
        }

        var states = {};
        if (this.filterControls) {
            _.each(this.filterControls, function (filterControl) {
                let typeName = (filterControl.inlineFilterButton.modelNames) || 'unknown';
                states[typeName] = filterControl.inlineFilterButton.getState();
            });
        }

        return states;
    },

    getModels: function () {
        return this.models;
    },

    getPortfolioItemTypes: function () {
        return this.portfolioItemTypes;
    },

    getLowestPortfolioItemType: function () {
        return this.portfolioItemTypes[0];
    },

    // Sets the states of the inline filters
    // Used when applying a shared view to the filters
    setMultiLevelFilterStates: function (states) {
        if (!this._isSubscriber()) {
            if (states) {
                this.suspendEvents(false);
                if (this.tabPanel) {
                    this.tabPanel.removeAll();
                }
                for (let key in states) {
                    if (states.hasOwnProperty(key)) {
                        for (let i = 0; i < this.filterControls.length; i++) {
                            let typeName = (this.filterControls[i].inlineFilterButton.modelNames) || 'unknown';
                            if (typeName === key) {
                                let filterBtn = this.filterControls[i].inlineFilterButton;
                                // filterBtn.suspendEvents(false);
                                filterBtn.applyState(states[key]);
                                // filterBtn.resumeEvents();
                            }
                        }
                    }
                }
                setTimeout(function () {
                    this.resumeEvents();
                    this.tabPanel && this.tabPanel.setActiveTab(this.defaultTab);
                    this._onChange();
                }.bind(this), 1500);
            }
            else {
                this._clearAllFilters();
            }
        }
    },

    // On many apps, the multilevel filter replaces the original single inline filter
    // control. Some users have saved views containing a filter state from this original
    // filter. This method allows apps to try and apply those filters to the multilevel
    // filter at the proper level in the porfolio hierarchy
    mergeLegacyFilter: function (multiFilterStates, legacyFilterState, modelName, setState) {
        if (!this._isSubscriber() && multiFilterStates && legacyFilterState && modelName) {
            for (let multiModel in multiFilterStates) {
                if (multiFilterStates.hasOwnProperty(multiModel)) {
                    if (multiModel === modelName) {
                        try {
                            let currentState = multiFilterStates[multiModel];
                            if (legacyFilterState.matchType) {
                                currentState.matchType = legacyFilterState.matchType;
                            }
                            if (typeof legacyFilterState.condition === 'string') {
                                currentState.condition = legacyFilterState.condition;
                            }
                            if (legacyFilterState.quickFilters) {
                                if (legacyFilterState.quickFilterFields && !legacyFilterState.quickFilterFields.length) {
                                    for (let qFilter of legacyFilterState.quickFilters) {
                                        legacyFilterState.quickFilterFields.push(qFilter.name);
                                    }
                                }
                                currentState.quickFilters = _.merge(currentState.quickFilters, legacyFilterState.quickFilters);
                            }
                            if (legacyFilterState.advancedFilters) {
                                currentState.advancedFilters = _.merge(currentState.advancedFilters, legacyFilterState.advancedFilters);
                            }
                            if (legacyFilterState.quickFilterFields) {
                                currentState.quickFilterFields = _.merge(currentState.quickFilterFields, legacyFilterState.quickFilterFields);
                            }
                        }
                        catch (e) {
                            console.error('Failed to merge legacy filter into multi-level filter');
                        }
                    }
                }
            }

            if (setState) {
                this.setMultiLevelFilterStates(multiFilterStates);
            }
        }
    },

    // Returns an array of records fitting the given filters
    _getFilteredRecords: async function (filters, model, resolve, reject) {
        let dataContext = Rally.getApp().getContext().getDataContext();
        if (this.getIgnoreProjectScope()) {
            dataContext.project = null;
        }

        let ancestor = this.getAncestorFilterForType(model);
        if (ancestor && ancestor.value) {
            filters.push(ancestor);
        }

        let fetch = ['ObjectID'];
        if (model === 'HierarchicalRequirement') {
            fetch.push('Feature');
        }
        else {
            fetch.push('Parent');
        }

        let totalCount = await this._getTotalResultCount(dataContext, filters, model);

        if (totalCount === -1) {
            reject('Multi-level filter failed while filtering out items above or below selected portfolio item type.');
        }
        else if (totalCount === 0) {
            resolve([]);
        }
        else if (totalCount > 6000) {
            reject('One of the filters is trying to return too many records and would result in long load times or timeouts, try using more specific filters to reduce the total result-set.');
        }
        else {
            let store = Ext.create('Rally.data.wsapi.Store', {
                autoLoad: false,
                context: dataContext,
                filters,
                model,
                fetch,
                limit: Infinity,
                enablePostGet: true
            });

            store.load().then({
                scope: this,
                success: function (records) {
                    resolve(records);
                },
                failure: function () {
                    reject('Multi-level filter failed while filtering out items above or below selected portfolio item type. Result set was probably too large.');
                }
            });
        }
    },

    _getTotalResultCount: function (context, filters, model) {
        let deferred = Ext.create('Deft.Deferred');

        let store = Ext.create('Rally.data.wsapi.Store', {
            autoLoad: false,
            context,
            filters,
            model,
            fetch: ['_ref'],
            limit: 1,
            enablePostGet: true
        });

        store.load().then({
            scope: this,
            success: function () {
                deferred.resolve(store.totalCount);
            },
            failure: function () {
                deferred.resolve(-1);
            }
        });

        return deferred.promise;
    },

    _setupPubSub: function () {
        if (this.publisher) {
            this.subscribe(this, 'registerChangeSubscriber', function (subscriberName) {
                // Register new unique subscribers
                if (!_.contains(this.changeSubscribers, subscriberName)) {
                    this.changeSubscribers.push(subscriberName);
                }
                this.publish(subscriberName, this._getValue());
            }, this);
            // Ask any existing subscribers to re-register
            this.publish('reRegisterChangeSubscriber');
        }
        else {
            this.subscriberEventName = Rally.getApp().getAppId() + this.$className;

            // Subscribe to a channel dedicated to this app
            this.subscribe(this, this.subscriberEventName, function (data) {
                if (this.intervalTimer) {
                    clearInterval(this.intervalTimer);
                    delete this.intervalTimer;
                }
                if (!this.isSubscriber) {
                    this.isSubscriber = true;
                    this._hideControlCmp();
                }

                // We only want to refresh the app if we have all of the filters from the broadcaster
                if (data.ready) {
                    this.publishedValue = data;
                    // Default to an ancestor change event for backwards compatibility
                    if (data.changeType === 'ancestor' || !data.changeType) {
                        this._onSelect();
                    }
                    else {
                        this._onChange();
                    }
                } else {
                    setTimeout(() => { this.publish('registerChangeSubscriber', this.subscriberEventName); }, 500);
                }
            }, this);

            // Attempt to register with a publisher (if one exists)
            this.publish('registerChangeSubscriber', this.subscriberEventName);
            this.registerAttempts = 0;
            this.intervalTimer = setInterval(() => {
                this.registerAttempts++;

                // After 15 attempts, there probably isn't a broadcaster present, so delete the interval
                if (this.registerAttempts >= 15) {
                    clearInterval(this.intervalTimer);
                    delete this.intervalTimer;
                    delete this.registerAttempts;
                }
                else {
                    this.publish('registerChangeSubscriber', this.subscriberEventName);
                }
            }, 500);
            this.subscribe(this, 'reRegisterChangeSubscriber', function () {
                this.publish('registerChangeSubscriber', this.subscriberEventName);
            }, this);
        }
    },

    _getValue: function () {
        var result = {};
        if (this._isSubscriber()) {
            result = this.publishedValue || {};
        }
        else {
            if (this.piTypeSelector) {
                var selectedPiType = this.piTypeSelector.getRecord();
                if (selectedPiType && this.piSelector) {
                    var selectedPiTypePath = selectedPiType.get('TypePath');
                    var selectedRecord = this.piSelector.getRecord();
                    var selectedPi = this.piSelector.getValue();
                    _.merge(result, {
                        piTypePath: selectedPiTypePath,
                        isPiSelected: !!selectedPi,
                        pi: selectedPi,
                        piRecord: selectedRecord
                    });
                }
            }
            result.ignoreProjectScope = this._ignoreProjectScope();
            result.filters = this.getMultiLevelFilters();
            result.filterStates = this.getMultiLevelFilterStates();
            result.wsapiFilters = this.getMultiLevelWsapiFilters();
            result.ready = this.ready;
        }
        return result;
    },

    _setReady: function () {
        // Hide floating components because of course they are still visible when settings menu is shown
        this.cmp.on('beforehide', () => {
            if (this.filterHelpBtn) {
                this.filterHelpBtn.hide();
            }
        });
        this.cmp.on('beforeshow', () => {
            if (this.filterHelpBtn) {
                this.filterHelpBtn.show();
            }
        });

        if (!this._showMultiLevelFilter() && this.filterHelpBtn) {
            this.filterHelpBtn.hide();
        }

        if (this._isSubscriber()) {
            if (this.tabPanel) {
                this.tabPanel.hide();
            }

            if (this.showFiltersBtn) {
                this.showFiltersBtn.hide();
            }

            if (this.filterHelpBtn) {
                this.filterHelpBtn.hide();
            }

            if (!this.publishedValue.filters) {
                setTimeout(function () {
                    this.ready = true;
                    this.fireEvent('ready', this);
                }.bind(this), 3000);
                return;
            }
        }
        else {
            this._updateReleaseValues();
        }
        this.ready = true;
        this.fireEvent('ready', this);
    },

    // Ancestor filter dropdowns have been selected
    _onSelect: function () {
        if (this.ready) {
            this.fireEvent('select', this);
        }
    },

    // Multi-level filters have changed
    _onChange: function () {
        if (this.ready) {
            this.fireEvent('change', this.getMultiLevelFilters());
        }
    },

    hideHelpButton: function () {
        if (this.filterHelpBtn) {
            this.filterHelpBtn.hide();
        }
    },

    showHelpButton: function () {
        if (this.filterHelpBtn) {
            this.filterHelpBtn.show();
        }
    },

    _getSettingsFields: function (fields) {
        var currentSettings = Rally.getApp().getSettings();
        if (!currentSettings.hasOwnProperty('Utils.AncestorPiAppFilter.projectScope')) {
            currentSettings['Utils.AncestorPiAppFilter.projectScope'] = this.projectScope;
        }
        if (!currentSettings.hasOwnProperty('Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter')) {
            currentSettings['Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter'] = this.displayMultiLevelFilter;
        }
        var pluginSettingsFields = [{
            xtype: 'rallycheckboxfield',
            id: 'Utils.AncestorPiAppFilter.enableAncestorPiFilter2',
            name: 'Utils.AncestorPiAppFilter.enableAncestorPiFilter2',
            fieldLabel: 'Filter artifacts by ancestor portfolio item',
        }, {
            xtype: 'rallyportfolioitemtypecombobox',
            id: 'Utils.AncestorPiAppFilter.defaultPiType',
            name: 'Utils.AncestorPiAppFilter.defaultPiType',
            fieldLabel: "Default Portfolio Item type",
            valueField: 'TypePath',
            allowNoEntry: false,
            defaultSelectionPosition: 'last',
            // Disable the preference enabled combo box plugin so that this control value is app specific
            plugins: []
        },
        {
            xtype: 'radiogroup',
            fieldLabel: 'Show artifacts from',
            columns: 1,
            vertical: true,
            allowBlank: false,
            name: 'Utils.AncestorPiAppFilter.projectScope',
            items: [{
                boxLabel: "User's current project(s).",
                name: 'Utils.AncestorPiAppFilter.projectScope',
                inputValue: 'current',
                checked: 'current' === currentSettings['Utils.AncestorPiAppFilter.projectScope'] || this.disableGlobalScope
            }, {
                boxLabel: "All projects in workspace.",
                name: 'Utils.AncestorPiAppFilter.projectScope',
                inputValue: 'workspace',
                checked: 'workspace' === currentSettings['Utils.AncestorPiAppFilter.projectScope'] && !this.disableGlobalScope,
                disabled: this.disableGlobalScope
            }, {
                boxLabel: 'User selectable (either current project(s) or all projects in workspace).',
                name: 'Utils.AncestorPiAppFilter.projectScope',
                inputValue: 'user',
                checked: 'user' === currentSettings['Utils.AncestorPiAppFilter.projectScope'] && !this.disableGlobalScope,
                disabled: this.disableGlobalScope
            },],
            listeners: {
                scope: this,
                change: function () {
                    return;
                }
            }
        },
        {
            xtype: 'rallycheckboxfield',
            id: 'Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter',
            name: 'Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter',
            fieldLabel: 'Enable multi-level portfolio item filter',
            value: currentSettings['Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter']
        }
        ];
        pluginSettingsFields = _.map(pluginSettingsFields, function (pluginSettingsField) {
            return _.merge(pluginSettingsField, this.settingsConfig);
        }, this);
        // apply any settings config to each field added by the plugin
        return pluginSettingsFields.concat(fields || []);
    },

    // When changing projects, if a release filter was previously applied, the inline filter state remembers the release
    // filter, but fails to populate the comobobox with the release name, which becomes misleading to 
    // the end user. This hack finds the release name and shoves it into the combobox.
    _updateReleaseValues: function () {
        _.each(this.filterControls, function (filter) {
            _.each(filter.inlineFilterButton.inlineFilterPanel.advancedFilterPanel.advancedFilterRows.rows, function (row) {
                if (row.name === 'Release' && row._valueFieldIsValid()) {
                    _.each(row.items.items, function (rowItem) {
                        if (rowItem.xtype === 'rallyreleasecombobox') {
                            this._getRelease(rowItem.originalValue).then(function (release) {
                                if (release) {
                                    rowItem.rawValue = release.Name;
                                }
                            });
                        }
                    }, this);
                }
            }, this);
        }, this);
    },

    // Requires that app settings are available (e.g. from 'beforelaunch')
    _addAncestorControls: function () {
        var controlsLayout = {
            type: 'hbox',
            align: 'middle',
            defaultMargins: '0 10 0 0'
        };
        var ownerLabelWidth = this.ownerLabelWidth;
        if (this.cmp.getWidth() < this.singleRowMinWidth) {
            controlsLayout = 'vbox';
            ownerLabelWidth = this.ancestorLabelWidth;
        }
        var scopeControlByItself = false;
        if (this._showAncestorFilter() === false && this._showIgnoreProjectScopeControl() === true) {
            scopeControlByItself = true;
        }
        var controls = {
            xtype: 'container',
            id: 'controlsArea',
            overflowX: 'auto',
            layout: {
                type: 'hbox',
                align: 'top'
            },
            items: [{
                xtype: 'container',
                id: 'pubSubIndicatorArea',
                width: 25,
                padding: '6 5 0 0',
                hidden: !this.publisher && !this._isSubscriber(),
                items: [{
                    xtype: 'component',
                    id: 'publisherIndicator',
                    html: '<span class="icon-bullhorn icon-large"></span>',
                    hidden: !this.publisher
                },
                {
                    xtype: 'component',
                    id: 'subscriberIndicator',
                    html: '<span class="icon-link icon-large"></span>',
                    hidden: !this._isSubscriber()
                },
                ]
            }, {
                xtype: 'container',
                id: 'filtersArea',
                layout: controlsLayout,
                items: [{
                    xtype: 'container',
                    id: 'ancestorFilterArea',
                    layout: {
                        type: 'hbox',
                        align: 'middle'
                    },
                    items: [{
                        xtype: 'container',
                        id: 'piTypeArea',
                        layout: {
                            type: 'hbox',
                            align: 'middle'
                        },
                    },
                    {
                        xtype: 'container',
                        id: 'piSelectorArea',
                        itemId: 'piSelectorArea',
                        layout: {
                            type: 'hbox',
                            align: 'middle',
                            padding: '0 0 0 5'
                        },
                    }
                    ]
                }, {
                    xtype: 'container',
                    itemId: 'scopeControlArea',
                    id: 'scopeControlArea',
                    width: this._showIgnoreProjectScopeControl() ? 250 : 0,
                    margin: this._showIgnoreProjectScopeControl() ? '0 10 0 0' : 0,
                    layout: {
                        type: 'hbox',
                        align: 'middle'
                    },
                    items: [{
                        xtype: 'rallycombobox',
                        itemId: 'ignoreScopeControl',
                        id: 'ignoreScopeControl',
                        stateful: true,
                        stateId: this.cmp.getContext().getScopedStateId('Utils.AncestorPiAppFilter.ignoreProjectScopeControl'),
                        stateEvents: ['select'],
                        hidden: this._isSubscriber() || !this._showIgnoreProjectScopeControl(),
                        displayField: 'text',
                        valueField: 'value',
                        labelStyle: this.labelStyle,
                        labelWidth: this._showIgnoreProjectScopeControl() ? ownerLabelWidth : 0,
                        fieldLabel: scopeControlByItself ? this.ownerOnlyLabel : this.ownerLabel,
                        // Don't set initial value with this component or it will override the state
                        storeConfig: {
                            fields: ['text', 'value'],
                            data: [{
                                text: "Current Project(s)",
                                value: false
                            }, {
                                text: "Any Project",
                                value: true
                            }]
                        },
                        listeners: {
                            scope: this,
                            change: function () {
                                this._onSelect();
                            }
                        },
                    }]
                }]
            }]
        };

        if (this.renderArea) {
            // Without this, the components are clipped on narrow windows
            this.renderArea.setOverflowXY('auto', 'auto');
            this.renderArea.add(controls);
            this.filterHelpBtn = Ext.widget('rallybutton', {
                itemId: 'filterHelpBtn',
                floating: true,
                shadow: false,
                cls: 'filter-help',
                iconOnly: true,
                iconCls: 'icon-help',
                hidden: this._isSubscriber() || !this._showMultiLevelFilter(),
                handler: (...args) => this.onHelpClicked(...args)
            });
            this.filterHelpBtn.showBy(this.renderArea, 'tr-tr', [-4, 5]);
        }

        this._addTooltips();

        // Need to get pi types sorted by ordinal lowest to highest for the filter logic to work
        return new Promise(function (resolve) {
            if (!this._isSubscriber() && this._showAncestorFilter()) {
                // Now create the pi type selector
                this._addPiTypeSelector().then(function () {
                    this._addPiSelector(this.piTypeSelector.getValue(), null).then(
                        function () {
                            resolve();
                        }.bind(this)
                    );
                }.bind(this));
            }
            else {
                resolve();
            }
        }.bind(this));
    },

    _addPiTypeSelector: function (initialValue) {
        return new Promise(function (resolve) {
            this.piTypeSelector = Ext.create('Rally.ui.combobox.PortfolioItemTypeComboBox', {
                xtype: 'rallyportfolioitemtypecombobox',
                id: 'Utils.AncestorPiAppFilter.piType',
                name: 'Utils.AncestorPiAppFilter.piType',
                width: 250,
                // Disable the preference enabled combo box plugin so that this control value is app specific
                plugins: [],
                stateful: true,
                stateId: this.cmp.getContext().getScopedStateId('Utils.AncestorPiAppFilter.piType'),
                stateEvents: ['select'],
                fieldLabel: this.ancestorLabel,
                labelWidth: this.ancestorLabelWidth,
                labelStyle: this.labelStyle,
                valueField: 'TypePath',
                value: initialValue || this._defaultPortfolioItemType(),
                allowNoEntry: false,
                defaultSelectionPosition: 'first',
                listeners: {
                    scope: this,
                    ready: function (combobox) {
                        // Unfortunately we cannot use the combobox store of PI types for our filter
                        // logic because it is sorted by ordinal from highest to lowest so that the
                        // picker options have a an order familiar to the user.

                        // Don't add the change listener until ready. This prevents us
                        // from adding and removing the pi selector multiple times during
                        // startup which causes a null ptr exception in that component
                        combobox.addListener({
                            scope: this,
                            change: this._onPiTypeChange
                        });
                        resolve();
                    }
                }
            });
            this.renderArea.down('#piTypeArea').add(this.piTypeSelector);
        }.bind(this));
    },

    _addTooltips: function () {
        Ext.tip.QuickTipManager.register({
            target: 'publisherIndicator',
            text: 'This app broadcasts filter settings to any enabled ancestor filtered apps (indicated with <span class="icon-link icon-large"></span>)',
            showDelay: 50,
            border: true
        });

        Ext.tip.QuickTipManager.register({
            target: 'subscriberIndicator',
            text: 'This app listens for filter settings from any enabled ancestor filter broadcast app (indicated with <span class="icon-bullhorn icon-large"></span>)',
            showDelay: 50,
            border: true
        });

        if (this._isSubscriber()) {
            Ext.tip.QuickTipManager.register({
                target: 'subscriberFilterIndicator',
                text: 'This app listens for filter settings from any enabled ancestor filter broadcast app (indicated with <span class="icon-bullhorn icon-large"></span>)',
                showDelay: 50,
                border: true
            });
        }
    },

    _onCmpResize: function (cmp, width) {
        var controlsLayout = {
            type: 'hbox',
            align: 'middle',
            defaultMargins: '0 10 0 0'
        };
        if (width < this.singleRowMinWidth) {
            controlsLayout = {
                type: 'vbox'
            };
        }
        var filtersArea = this.renderArea.down('#filtersArea');
        if (filtersArea) {
            var controlsArea = this.renderArea.down('#controlsArea');
            var filters = filtersArea.removeAll(false);
            var newFiltersArea = {
                xtype: 'container',
                id: 'filtersArea',
                layout: controlsLayout,
                items: filters,
                hidden: filtersArea.isHidden()
            };
            controlsArea.remove(filtersArea, false);
            controlsArea.add(newFiltersArea);
        }
    },

    _hideControlCmp: function () {
        if (this.renderArea) {
            this.renderArea.down('#pubSubIndicatorArea').show();
            this.renderArea.down('#subscriberIndicator').show();
            this.renderArea.down('#filtersArea').hide();
        }
    },

    _onPiTypeChange: function (piTypeSelector, newValue) {
        if (newValue) {
            let currentPi = this._getValue().pi;
            this._removePiSelector();
            this._addPiSelector(newValue).then(
                function () {
                    // this._setReady();
                    // If an ancestor was selected it has now been cleared, so fire select event
                    if (currentPi) {
                        this._onSelect();
                    }
                }.bind(this)
            );
        }
    },

    _removePiSelector: function () {
        this.piSelector = null;
        this.renderArea.down('#piSelectorArea').removeAll(true);
    },

    _addPiSelector: function (piType, initialValue) {
        return new Promise(function (resolve) {
            this.piSelector = Ext.create('Rally.ui.combobox.ArtifactSearchComboBox', {
                id: 'Utils.AncestorPiAppFilter.piSelector',
                width: 250,
                margin: '0 10 0 10',
                labelAlign: 'top',
                storeConfig: {
                    models: piType,
                    autoLoad: true,
                    fetch: this.defaultFetch,
                    context: {
                        project: null
                    }
                },
                queryDelay: 2000,
                typeAhead: false,
                validateOnChange: false,
                stateful: true,
                stateId: this.cmp.getContext().getScopedStateId('Utils.AncestorPiAppFilter.piSelector'),
                stateEvents: ['select'],
                valueField: '_ref',
                allowClear: true,
                clearValue: null,
                allowNoEntry: this.allowNoEntry,
                noEntryValue: '',
                value: initialValue || null,
                // forceSelection: false,
                defaultSelectionPosition: null,
                listeners: {
                    scope: this,
                    select: function () {
                        this._onSelect();
                    },
                    ready: function () {
                        resolve();
                    }
                }
            });
            // Allow this combobox to save null state (which is default behavior of
            // stateful mixin, but for some reason was overridden in combobox)
            Ext.override(this.piSelector, {
                saveState: function () {
                    var me = this,
                        id = me.stateful && me.getStateId(),
                        hasListeners = me.hasListeners,
                        state;

                    if (id) {
                        state = me.getState() || {}; //pass along for custom interactions
                        if (!hasListeners.beforestatesave || me.fireEvent('beforestatesave', me, state) !== false) {
                            Ext.state.Manager.set(id, state);
                            if (hasListeners.statesave) {
                                me.fireEvent('statesave', me, state);
                            }
                        }
                    }
                }
            });
            this.renderArea.down('#piSelectorArea').add(this.piSelector);
        }.bind(this));
    },

    _setPiSelector: function (piType, pi) {
        return new Promise(function (resolve) {
            if (this.piTypeSelector) {
                this.piTypeSelector.suspendEvents(false);
                this.piTypeSelector.setValue(piType);
                this._removePiSelector();
                this._addPiSelector(piType, pi).then(function () {
                    this.piSelector.setValue(pi);
                    this.piTypeSelector.resumeEvents();
                    resolve();
                }.bind(this));
            }
            else {
                resolve();
            }
        }.bind(this));
    },

    _showAncestorFilter: function () {
        let enableAncestorFilter = this.cmp.getSetting('Utils.AncestorPiAppFilter.enableAncestorPiFilter2');

        if (enableAncestorFilter === undefined) {
            return false;
        }

        return enableAncestorFilter;
    },

    _showIgnoreProjectScopeControl: function () {
        let showProjectScope = this.cmp.getSetting('Utils.AncestorPiAppFilter.projectScope') === 'user';

        if (showProjectScope === undefined) {
            return this.projectScope;
        }

        return showProjectScope;
    },

    _ignoreProjectScope: function () {
        if (this._isSubscriber()) {
            return this.publishedValue.ignoreProjectScope;
        }

        var result = false;
        if (this._showIgnoreProjectScopeControl()) {
            // If the control is shown, that values overrides the ignoreScope app setting
            result = this.renderArea.down('#ignoreScopeControl').getValue();
        }
        else if (this.cmp.getSetting('Utils.AncestorPiAppFilter.projectScope') === undefined) {
            result = this.projectScope === 'workspace';
        }
        else if (this.cmp.getSetting('Utils.AncestorPiAppFilter.projectScope') === 'workspace') {
            result = true;
        }

        return result;
    },

    _isSubscriber: function () {
        return this.isSubscriber;
    },

    _defaultPortfolioItemType: function () {
        return this.cmp.getSetting('Utils.AncestorPiAppFilter.defaultPiType');
    },

    _getPropertyPrefix: function (typeName, typesAbove) {
        let type = typeName.toLowerCase();
        let property;

        if (type === 'hierarchicalrequirement' || type === 'userstory') {
            property = this.getLowestPortfolioItemType().get('Name');
        }
        else if (type === 'defect') {
            property = 'Requirement';
            typesAbove = typesAbove.slice(1);
            if (typesAbove.length) {
                property += `.${this.getLowestPortfolioItemType().get('Name')}`;
            }
        }
        else if (Ext.String.startsWith(type, 'portfolioitem')) {
            property = 'Parent';
        }

        if (property) {
            // property already gets us to the lowest pi level above the current type
            // for each additional level, add a 'Parent' term, except for the last
            // type in the list which is the currently selected pi type ancestor
            _.forEach(typesAbove.slice(1), function () {
                property += '.Parent';
            }, this);
        }

        return property;
    },

    /**
     * Return a list of artifact types AT or below selectedPiTypePath,
     * that are an ancestor of the given modelName, or null if there are no pi type
     * ancestors for the given model.
     */
    _getAncestorTypeArray: function (modelName, selectedPiTypePath) {
        var selectedPiTypeIndex;
        var modelNamePiTypeIndex;
        var model = modelName.toLowerCase();
        var selectedModel = selectedPiTypePath.toLowerCase();

        if (model === 'defect') {
            selectedPiTypeIndex = _.findIndex(this.allTypes, function (type) {
                return type.get('TypePath').toLowerCase() === selectedModel;
            });
            return this.allTypes.slice(0, selectedPiTypeIndex + 1);
        }

        modelNamePiTypeIndex = _.findIndex(this.allTypes, function (type) {
            return type.get('TypePath').toLowerCase() === model;
        });
        selectedPiTypeIndex = _.findIndex(this.allTypes, function (type) {
            return type.get('TypePath').toLowerCase() === selectedModel;
        });

        if (modelNamePiTypeIndex < selectedPiTypeIndex) {
            // Don't include the current model pi in the list of ancestors
            // Include the selcted pi type ancestor
            return this.allTypes.slice(modelNamePiTypeIndex + 1, selectedPiTypeIndex + 1);
        }

        return null;
    },

    /*
        Multi-Level Filter functions
    */
    _showMultiLevelFilter: function () {
        let showFilters = this.cmp.getSetting('Utils.MultiLevelPiAppFilter.enableMultiLevelPiFilter');

        if (showFilters === undefined) {
            return this.displayMultiLevelFilter;
        }

        return showFilters;
    },

    _addFilters: function () {
        return new Promise(function (resolve, reject) {
            var promises = [];
            if (this._showMultiLevelFilter() && !this._isSubscriber()) {
                if (this.btnRenderArea) {
                    if (!this._isSubscriber()) {
                        this.showFiltersBtn = this.btnRenderArea.add(
                            {
                                xtype: 'multifiltertogglebtn',
                                cls: ` rly-small ${this.filtersHidden ? 'secondary' : 'primary'}`,
                                handler: this._toggleFilters,
                                scope: this,
                                stateId: this.cmp.getContext().getScopedStateId(`multi-filter-toggle-button`),
                                listeners: {
                                    scope: this,
                                    added: function (btn) {
                                        if (this.filtersHidden) {
                                            btn.setFiltersHidden(true);
                                        }

                                        if (btn.filtersHidden) {
                                            btn.setToolTipText('Show Filters');
                                        }
                                        else {
                                            btn.setToolTipText('Hide Filters');
                                        }
                                    }
                                }
                            }
                        );

                        Rally.data.ModelFactory.getModels({
                            types: this._getAllTypePaths().reverse(),
                            context: this.cmp.getContext(),
                            scope: this,
                            success: function (models) {
                                this.models = models;

                                this.tabPanel = this.panelRenderArea.add({
                                    xtype: 'tabpanel',
                                    itemId: 'multiLevelFilterTabPanel',
                                    width: '98%',
                                    cls: 'blue-tabs',
                                    minTabWidth: 100,
                                    plain: true,
                                    autoRender: true,
                                    hidden: this._isSubscriber() || this.showFiltersBtn.filtersHidden,
                                    hideMode: 'offsets',
                                    items: []
                                });

                                this.filterControls = [];
                                let clearAdvancedButtonConfig = {};
                                let matchTypeConfig = {};
                                let advancedFilterRowsFlex = 1;
                                let propertyFieldConfig = {
                                    blackListFields: this.blackListFields,
                                    whiteListFields: this.whiteListFields
                                };
                                let context = this.cmp.getContext();

                                if (this.cmp.getWidth() < this.singleRowMinWidth) {
                                    clearAdvancedButtonConfig = {
                                        text: 'Clear'
                                    };
                                    matchTypeConfig = {
                                        fieldLabel: 'Match',
                                        width: 65
                                    };
                                    propertyFieldConfig.width = 100;
                                    advancedFilterRowsFlex = 2;
                                }

                                // If a default visible tab is specified, we need to convert an
                                // artifact ordinal to a tab index
                                // Tab indices start at 0 for top-most portfolio item
                                // Artfiact ordinals start at -1 for user stories, 0 for Features, etc...
                                let ordinalLookup = {};
                                let modelLength = Object.keys(models).length;
                                if (this.visibleTab) {
                                    for (let i = 0; i < modelLength; i++) {
                                        ordinalLookup[i] = modelLength - i - 1;
                                    }
                                }

                                _.each(models, function (model, key) {
                                    if (this.visibleTab && this.visibleTab.toLowerCase() === key.toLowerCase()) {
                                        let ord = model.ordinal;
                                        if (typeof ord === 'number') {
                                            let newDefaultTab = ordinalLookup[ord + 1];
                                            if (typeof newDefaultTab === 'number') {
                                                this.defaultTab = newDefaultTab;
                                            }
                                        }
                                    }

                                    promises.push(new Promise(function (newResolve) {
                                        let filterName = `inlineFilter${key}`;
                                        this.filterControls.push(Ext.create('Rally.ui.inlinefilter.InlineFilterControl', {
                                            xtype: 'rallyinlinefiltercontrol',
                                            name: filterName,
                                            autoRender: true,
                                            itemId: filterName,
                                            context,
                                            inlineFilterButtonConfig: {
                                                stateful: true,
                                                stateId: this.cmp.getContext().getScopedStateId(`multi-${filterName}-button`),
                                                stateEvents: ['inlinefilterchange'],
                                                context: this.cmp.getContext(),
                                                modelNames: key,
                                                filterChildren: this.filterChildren,
                                                inlineFilterPanelConfig: {
                                                    autoRender: true,
                                                    name: `${filterName}-panel`,
                                                    itemId: `${filterName}-panel`,
                                                    model: model,
                                                    padding: 5,
                                                    width: '98%',
                                                    context,
                                                    quickFilterPanelConfig: {
                                                        defaultFields: this.defaultFilterFields,
                                                        addQuickFilterConfig: {
                                                            whiteListFields: this.whiteListFields,
                                                            blackListFields: this.blackListFields
                                                        }
                                                    },
                                                    advancedFilterPanelConfig: {
                                                        collapsed: this.advancedFilterCollapsed,
                                                        advancedFilterRowsConfig: {
                                                            propertyFieldConfig,
                                                            flex: advancedFilterRowsFlex
                                                        },
                                                        matchTypeConfig,
                                                        clearAdvancedButtonConfig
                                                    }
                                                },
                                                listeners: {
                                                    inlinefilterchange: this._onFilterChange,
                                                    inlinefilterready: function (panel) {
                                                        this._onFilterReady(panel);
                                                        newResolve();
                                                    },
                                                    scope: this
                                                }
                                            }
                                        }));
                                    }.bind(this)));
                                }, this);

                                Promise.all(promises).then(function () {
                                    if (!this._isSubscriber()) {
                                        this.clearAllButton = Ext.widget({
                                            xtype: 'rallybutton',
                                            itemId: 'clearAllButton',
                                            cls: 'secondary rly-small clear-all-filters-button',
                                            text: 'Clear All',
                                            margin: '3 9 3 0',
                                            hidden: !this._hasFilters(),
                                            listeners: {
                                                click: this._clearAllFilters,
                                                scope: this
                                            }
                                        });

                                        this.btnRenderArea.add(this.clearAllButton);
                                        this.tabPanel.setActiveTab(this.defaultTab);
                                        if (this.filtersHidden) {
                                            this.tabPanel.hide();
                                        }

                                        // Without this, the components are clipped on narrow windows
                                        this.btnRenderArea.setOverflowXY('auto', 'auto');
                                    }
                                    resolve();
                                }.bind(this));
                            },
                            failure: function () {
                                reject('Failed to fetch models for multi-level filter');
                            }
                        });
                    }
                    else {
                        this.btnRenderArea.add({
                            xtype: 'container',
                            id: 'filterSubIndicatorArea',
                            width: 25,
                            padding: '6 5 0 0',
                            items: [
                                {
                                    xtype: 'component',
                                    id: 'subscriberFilterIndicator',
                                    html: '<span class="icon-link icon-large"></span>'
                                }
                            ]
                        });
                        resolve();
                    }
                } else {
                    reject('Unable to find button render area for multi-level filter');
                }
            }
            else {
                resolve();
            }
        }.bind(this));
    },

    _clearAllFilters: function () {
        this.suspendEvents(false);

        // The quick filters don't properly clear if the filter isn't displayed
        let activeTab = this.tabPanel.getActiveTab();

        _.each(this.filterControls, function (filterControl) {
            try {
                this.tabPanel.setActiveTab(filterControl.tab);
                filterControl.inlineFilterButton.suspendEvents(false);
                filterControl.inlineFilterButton.clearAllFilters();
                filterControl.inlineFilterButton.saveState();
                filterControl.inlineFilterButton.resumeEvents();
            }
            catch (e) {
                console.log(e);
            }
        }.bind(this));

        this.tabPanel.setActiveTab(activeTab);
        this.resumeEvents();
        this._onFilterChange();
    },

    _hasFilters: function () {
        var filters = this.getMultiLevelFilters();
        var returnVal = false;

        _.each(filters, function (filter) {
            if (filter.length) {
                returnVal = true;
            }
        });

        return returnVal;
    },

    _onFilterReady: function (panel) {
        panel.expand();
        let filterCount = panel.quickFilterPanel.getFilters().length + panel.advancedFilterPanel.getFilters().length;
        let modelName = this._getModelName(panel);

        let tab = this.tabPanel.add({
            title: modelName + (filterCount ? ` (${filterCount})` : ''),
            html: '',
            itemId: `${modelName.replace(/\s+/g, '')}-tab`,

        });

        tab.add({
            xtype: 'container',
            layout: 'hbox',
            items: [panel]
        });

        panel.tab = tab;
    },

    _getModelName(panel) {
        let modelName = (panel.model && panel.model.elementName) || 'unknown';

        if (modelName === 'HierarchicalRequirement') {
            modelName = panel.model.displayName;
        }

        return modelName;
    },

    _applyFilters: function () {
        this.suspendEvents(false);
        this.suspendLayouts();
        _.each(this.filterControls, function (filterControl) {
            filterControl.inlineFilterButton._applyFilters();
        });
        this.resumeEvents();
        this.resumeLayouts(false);
        this.updateLayout();
    },

    _onFilterChange: function () {
        if (this.clearAllButton) {
            if (this._hasFilters()) {
                this.clearAllButton.show();
            }
            else {
                this.clearAllButton.hide();
            }
        }

        _.each(this.filterControls, function (filterControl) {
            let modelName = this._getModelName(filterControl.inlineFilterButton.inlineFilterPanel);
            this._setTabText(modelName, filterControl.inlineFilterButton.getFilters().length);
        }, this);

        if (this.ready) {
            this.fireEvent('change', this.getMultiLevelFilters());
        }
    },

    _setTabText: function (typeName, filterCount) {
        var titleText = filterCount ? `${typeName} (${filterCount})` : typeName;
        var tab = this.tabPanel.child(`#${typeName.replace(/\s+/g, '')}-tab`);

        if (tab) { tab.setTitle(titleText); }
    },

    _toggleFilters: function (btn) {
        if (this.tabPanel.isHidden()) {
            this.tabPanel.show();
            btn.setToolTipText('Hide Filters');
            btn.addCls('primary');
            btn.removeCls('secondary');
            btn.setFiltersHidden(false);
        } else {
            this.tabPanel.hide();
            btn.setToolTipText('Show Filters');
            btn.addCls('secondary');
            btn.removeCls('primary');
            btn.setFiltersHidden(true);
        }
    },

    _getAllTypePaths: function () {
        return _.map(this.allTypes, (type) => {
            return type.get('TypePath');
        });
    },

    /**
    *   Overrides to allow a store load to be canceled which will abort loading
    *   any subsequent pages and not invoke the load callback.
    */

    /*     TODO - Future work
 
     _addCancelLoad() {
 
         Ext.override(Rally.data.PageableStore, {
 
             loadCanceled: false,
 
             cancelLoad: function () {
                 this.loadCanceled = true;
             },
 
             load: function (options) {
                 this.loadCanceled = false;
                 this.callParent(arguments);
             },
 
             _shouldLoadMorePages: function (operation) {
                 if (this.loadCanceled) {
                     return false;
                 }
                 else {
                     return this.callParent(arguments)
                 }
             },
 
             _afterDoneLoadingAllPages: function (operation, success, callback, scope) {
                 if (this.loadCanceled) {
                     // Loading canceled. Don't send any events or invoke the callback
                     this.resumeEvents();
                     this.currentPage = 1;
                     this.loading = false;
                 }
                 else {
                     this.callParent(arguments);
                 }
             }
         });
     },
 
     */

    _showError(msg, defaultMessage) {
        Rally.ui.notify.Notifier.showError({ message: this.parseError(msg, defaultMessage) });
    },

    parseError(e, defaultMessage) {
        defaultMessage = defaultMessage || 'An unknown error has occurred';

        if (typeof e === 'string' && e.length) {
            return e;
        }
        if (e.message && e.message.length) {
            return e.message;
        }
        if (e.exception && e.error && e.error.errors && e.error.errors.length) {
            if (e.error.errors[0].length) {
                return e.error.errors[0];
            } else {
                if (e.error && e.error.response && e.error.response.status) {
                    return `${defaultMessage} (Status ${e.error.response.status})`;
                }
            }
        }
        if (e.exceptions && e.exceptions.length && e.exceptions[0].error) {
            return e.exceptions[0].error.statusText;
        }
        return defaultMessage;
    },

    onHelpClicked() {
        CustomAgile.ui.tutorial.MultiLevelFilterTutorial.showWelcomeDialog(this);
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.AddNew, {

        _getFieldConfigs: function() {

            var newLabel = this.fieldLabel;

            var items = [{
                itemId: 'label',
                xtype: 'label',
                text: newLabel
            }];

            if (this._showRecordTypes()) {
                var data = _.map(this.recordTypes, function(recordType) {
                    return {
                        type: recordType,
                        displayName: recordType
                    };
                }, this);

                var comboCfg = Ext.merge({
                    itemId: 'type',
                    xtype: 'rallycombobox',
                    flex: 1,
                    minWidth: 50,
                    maxWidth: 100,
                    matchFieldWidth: true,
                    store: {
                        fields: ['type', 'displayName'],
                        data: data
                    },
                    listeners: {
                        change: this._onRecordTypeChanged,
                        scope: this
                    },
                    valueField: 'type',
                    displayField: 'displayName',
                    value: this.recordTypes[0],
                    queryMode: 'local',
                    editable: false
                }, this.comboCfg || {});

                items.push(comboCfg);
            }

            if(this.showNameField) {
                items.push({
                    itemId: 'nameField',
                    xtype: 'rallytextfield',
                    plugins: [
                        'rallyfieldvalidationui'
                    ],
                    emptyText: 'Name',
                    flex: 1,
                    minWidth: 100,
                    maxWidth: 300,
                    enableKeyEvents: true,
                    listeners: {
                        specialKey: this._onTextFieldSpecialKey,
                        keyup: this.toggleAddButton,
                        scope: this
                    }
                });
            }
            return items;
        }
    });


/**
 * @private
 * Displays the result of calculated fields on a card
 * 
 * Override to change display
 * 
 */
Ext.override(Rally.ui.cardboard.plugin.CardAge, {
    
    _addField: function() {
        var me = this,
            cmp = me.cmp;

        this.cmp.addField({
            name: cmp.ageFieldName,
            renderTpl: function() {
                var age = me._getAge();
                if (age >= cmp.showAge) {
                    return [
                        '<div class="', [cmp.ageFieldName, 'timeInState'].join(' '), '">',
                            '<span>',
                                age.toString(),
                                ' ',
                                Ext.util.Inflector.pluralize(cmp.ageIntervalUnit),
                            ' in this column</span>',
                        '</div>'
                    ].join('');
                }
                return '';
            },
            isStatus: true,
            hasValue: function() {
                var record = cmp.getRecord();
                return record.raw[cmp.ageFieldName] !== undefined || record.get(cmp.ageFieldName);
            }
        });
    }
});

Ext.override(Rally.ui.cardboard.CardBoard, {
    _createRow: function(rowConfig, applySort) {
        var collapsed = false;
        if (this.rowConfig && this.rowConfig.field && this.state && this.state.collapsedRows) {
            var rowKey = this._getRowKey(this.rowConfig.field, rowConfig.value);
            collapsed = this.state.collapsedRows.hasOwnProperty(rowKey);
        }

        var defaultRowConfig = {
            el: this.getEl().down('tbody.columns'),
            columns: this.columnDefinitions,
            context: this.getAppContextOrEnvironmentContext(),
            fieldDef: this.rowConfig && this.rowConfig.fieldDef,
            collapsed: collapsed
        };

        if (this.rowConfig) {
            if(this.rowConfig.headerConfig) {
                defaultRowConfig.headerConfig = this.rowConfig.headerConfig;
            }
            if(this.rowConfig.sortField) {
                defaultRowConfig.sortField = this.rowConfig.sortField;
            }
        }

        var row = Ext.create('Rally.ui.cardboard.row.Row',
            Ext.apply(defaultRowConfig, rowConfig)),
            sortIndex = applySort ? this._getSortedIndex(row) : this.rowDefinitions.length;
        this.rowDefinitions.splice(sortIndex, 0, row);
        row.insert(this.rowDefinitions[sortIndex + 1]);

        if(row.isCollapsible()) {
            row.on('collapse', this.saveState, this);
            row.on('expand', this.saveState, this);
        }
        return row;
    },
        _onColumnReady: function (column, records) {
            this._columnsLoaded = this._columnsLoaded || 0;
            this._columnsLoaded++;
            this.fireEvent('columnready', column, this);
            if (this._columnsLoaded === this.columnDefinitions.length) {
                this._onAllColumnsReady();

                if(!this.getRows().length) {
                    if(this.rowConfig) {
                        this._createRow({
                            showHeader: true,
                            value: null,
                            isBlankSlate: true
                        });
                    } else {
                        this._createDefaultRow();
                    }
                }
            }
        }

});

Ext.override(Rally.ui.cardboard.Column, {
    getStoreFilter: function(){
        var filters = {
            property: this.attribute,
            operator: '=',
            value: this.getValue() || ""  //I need to do this to accomodate the INvestment category field
        };
        return filters;
    },
    /**
     * Determines whether the specified record may be contained within this column
     * (If its value matches that of this column)
     *
     * @param {Rally.data.Model} record
     */
    isMatchingRecord: function(record) {
        var recordValue = record.get(this.attribute),
            field = record.getField(this.attribute),
            typePath = record.self.typePath,
            models = this.store.models || Ext.Array.from(this.store.model),
            supportedTypes = _.pluck(models, 'typePath');

        if (!field || !_.contains(supportedTypes, typePath)) {
            return false;
        }

        var columnValue = this.getValue();

        // Field values can be converted from null. So we need to convert the column
        // value in case it is null
        if (Ext.isFunction(field.convert)) {
            columnValue = field.convert(columnValue, record);
        }

        return (columnValue === recordValue ||
        (Rally.util.Ref.isRefUri(columnValue) &&
        Rally.util.Ref.getRelativeUri(recordValue) === Rally.util.Ref.getRelativeUri(columnValue)) ||
            !columnValue && (recordValue === "None"));  //I need to do this to accomodate the INvestment category field
    }
});
Ext.define('Rally.apps.kanban.Column', {
    extend: 'Rally.ui.cardboard.Column',
    alias: 'widget.kanbancolumn',

    config: {
        hideReleasedCards: false
    },

    getStoreFilter: function (model) {
        var filters = [];

        Ext.Array.push(filters, this.callParent(arguments));

        if (this.hideReleasedCards && model.typePath.toLowerCase() === 'portfolioitem/feature') {
            filters.push({
                property: 'Release',
                value: null
            });
        }
        return filters;
    }
});


/**
 * A picker which allows selecting one or more fields and a configurable right side action on bound list.
 */
Ext.define('Rally.apps.kanban.ColumnCardFieldPicker', {
    extend: 'Rally.ui.picker.FieldPicker',
    alias: 'widget.kanbancolumncardfieldpicker',
    margin: 0,

    config: {
        /**
         * @cfg {String}
         * Initial text shown on right side of bound list
         */
        rightInitialText: 'Apply to All',

        /**
         * @cfg {String}
         * Text shown on right side of bound list after click
         */
        rightUpdateText: 'Remove from All',

        /**
         * @cfg {String}
         * Class for right side of bound list
         */
        rightCls: 'rui-picker-right-action hyperlink'

    },


    initComponent: function() {
        this.addEvents(
            /**
             * @event rightactionclick
             * Fires when a right side text was clicked in the picker
             * @param {Rally.ui.picker.MultiObjectPicker} picker This picker
             * @param {Object} value The newly clicked value
             * @param {Object[]} values The currently selected values
             * @param {Ext.Element} The element clicked
             */
            'rightactionclick'
        );
        this.applyToAllFields = [];
        this.callParent(arguments);
    },

    onListItemDeselect: function(record, event, itemEl) {
        var rightActionEl = this._getRightActionEl(record);

        if (rightActionEl && event.within(rightActionEl)) {
            var initialTextClicked = rightActionEl.getHTML() === this.rightInitialText;
            this.fireEvent('rightactionclick', this, record, this.getValue(), initialTextClicked);

            if (initialTextClicked) {
                this.applyToAllFields.push(record.get(this.selectionKey));
                this._selectRowCheckbox(record.get(this.recordKey));
                rightActionEl.update(this.rightUpdateText);
                return false;
            } else {
                Ext.Array.remove(this.applyToAllFields, record.get(this.selectionKey));
                rightActionEl.update(this.rightInitialText);
            }
        } else {
            Ext.Array.remove(this.applyToAllFields, record.get(this.selectionKey));
        }
        this.callParent(arguments);
    },

    getRightListHtml: function(recordData) {
        var tpl = '';
        if (recordData.groupSelected === 'Selected Fields' &&
            !Ext.Array.contains(this.alwaysSelectedValues, recordData[this.selectionKey])) {
            var text = Ext.Array.contains(this.applyToAllFields, recordData[this.selectionKey]) ? this.rightUpdateText: this.rightInitialText;
            tpl = '<div class="' + this.rightCls + '">' + text + '</div>';
        }
        return tpl;
    },

    _getRightActionEl: function(record) {
        var rightSelector = Ext.String.splitWords(this.rightCls).join('.');
        return this.list.getEl().down('.rui-multi-object-picker-option-id-' + record.get(this.recordKey) + ' .' + rightSelector);
    }

});
/**
 * Allows configuration of wip and schedule state mapping for kanban columns
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'kanbancolumnsettingsfield',
 *              value: {}
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.apps.kanban.ColumnSettingsField', {
    extend: 'Ext.form.field.Base',
    alias: 'widget.kanbancolumnsettingsfield',
    plugins: ['rallyfieldvalidationui'],
    requires: [
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.TextField',
        'Rally.ui.combobox.FieldValueComboBox',
        'Rally.ui.plugin.FieldValidationUi',
        'Rally.apps.kanban.ColumnCardFieldPicker'
    ],

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 600,
    cls: 'column-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The column settings value for this field
         */
        value: undefined,

        defaultCardFields: ''
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        this.callParent(arguments);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['column', 'shown', 'wip', 'portfolioStateMapping', 'portfolioStateName', 'cardFields','ref','type'],
            data: []
        });
        this._buildGrid();

    },

    _buildGrid: function(){
        if (this._grid) {
            this._grid.destroy();
        }

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            height: 225,
            scroll: 'vertical',
            autoScroll: true,
            editingConfig: {
                publishMessages: false
            }
        });
        this._grid.on('validateedit', function(editor, e) {

            if (e && e.column && e.column.dataIndex === 'portfolioStateMapping'){
                e.record.set('portfolioStateName',  e && e.editorRecord && e.editorRecord.name || "-- No Mapping --");
                if (!e.record.get('shown') &&  e.editorRecord && e.editorRecord.name !== "-- No Mapping --"){e.record.set('shown', true)}
            }
            return true;
        });
    },
    _getColumnCfgs: function() {
        var modelType = this.modelType;

        var columns = [
            {
                text: 'Column',
                dataIndex: 'column',
                emptyCellText: 'None',
                flex: 2
            },
            {
                text: 'Show',
                dataIndex: 'shown',
                flex: 1,
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'WIP',
                dataIndex: 'wip',
                flex: 1,
                emptyCellText: '&#8734;',
                editor: {
                    xtype: 'rallytextfield',
                    maskRe: /[0-9]/,
                    validator: function (value) {
                        return (value === '' || (value > 0 && value <= 9999)) || 'WIP must be > 0 and < 9999.';
                    },
                    rawToValue: function (value) {
                        return value === '' ? value : parseInt(value, 10);
                    }
                }
            },
            {
                text:'ref',
                dataIndex:'ref',
                hidden:true
            },
            {
                text:'type',
                dataIndex:'type',
                hidden:true
            }];

        if (this.fieldName !== "State"){
            columns.push({
                text: 'Portfolio State Mapping',
                dataIndex: 'portfolioStateMapping',
                emptyCellText: '--No Mapping--',
                editable: false,
                flex: 2,
                editor: this._getPortfolioStateEditorConfig(modelType),
                renderer: function(v,m,r){
                    return r.get('portfolioStateName') || r.get('portfolioStateMapping');
                }
            });
        }

        if (this.shouldShowColumnLevelFieldPicker) {
            columns.push({
                text: 'Fields',
                dataIndex: 'cardFields',
                width: 300,
                tdCls: Rally.util.Test.toBrowserTestCssClass('cardfields', ''),
                renderer: this._getRendererForCardFields,
                scope: this,
                editor: {
                    xtype: 'kanbancolumncardfieldpicker',
                    cls: 'card-fields',
                    margin: 0,
                    modelTypes: ['UserStory', 'Defect'],
                    autoExpand: true,
                    alwaysExpanded: false,
                    hideTrigger: true,
                    fieldBlackList: ['DisplayColor'],
                    alwaysSelectedValues: ['FormattedID', 'Name', 'Owner'],
                    storeConfig: {
                        autoLoad: false
                    },
                    listeners: {
                        selectionchange: function (picker) {
                            picker.validate();
                        },
                        rightactionclick: this._updateColumnCardFieldSettings,
                        scope: this
                    }
                }
            });
        }
        return columns;
    },
    _getPortfolioStateEditorConfig: function(model){

        return {
            xtype: 'rallyfieldvaluecombobox',
            model: Ext.identityFn(model),
            field: 'State',
            disabled: false,
            listeners: {
                ready: function (combo) {
                    var noMapping = {};
                    noMapping[combo.displayField] = '-- No Mapping --';
                    noMapping[combo.valueField] = null;
                    combo.store.insert(0, [noMapping]);
                    combo.setValue(null);
                }
            }
        };
    },
    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },

    _getRendererForCardFields: function(fields) {
        var valWithoutPrefixes = [];
        Ext.Array.each(this._getCardFields(fields), function(field) {
            valWithoutPrefixes.push(field.replace(/^c_/, ''));
        });
        return valWithoutPrefixes.join(', ');
    },

    _getCardFields: function(fields) {
        if (Ext.isString(fields) && fields) {
            return fields.split(',');
        }
        var val = ['FormattedID','Name','Owner'];
        Ext.Array.each(fields, function (currentItem) {
            if (currentItem && currentItem.data && !Ext.Array.contains(val, currentItem.data.name)) {
                val.push(currentItem.data.name);
            }
        });
        return val;
    },

    _updateColumnCardFieldSettings: function(picker, selectedRecord, value, initialText) {
        this._store.each(function(record) {
            if (record.get('shown')) {
                var cardFields = this._getCardFields(record.get('cardFields'));

                if (initialText) {
                    if (!Ext.Array.contains(cardFields, selectedRecord.get('name'))) {
                        cardFields.push(selectedRecord.get('name'));
                    }
                } else {
                    Ext.Array.remove(cardFields, selectedRecord.get('name'));
                }
                record.set('cardFields', cardFields.join(','));
            }
        }, this);

        this._store.loadRawData(this._store.getRange());
    },

    _buildSettingValue: function() {
        var columns = {};
        this._store.each(function(record) {
            if (record.get('shown')) {

                columns[record.get('column')] = {
                    ref: record.get('ref'),
                    type: record.get('type'),                    
                    wip: record.get('wip'),
                    portfolioStateMapping: record.get('portfolioStateMapping'),
                    portfolioStateName: record.get('portfolioStateName')
                };
             //   console.log(record.get('column'), record.get('portfolioStateMapping'), record.get('portfolioStateName'));
                if (this.shouldShowColumnLevelFieldPicker) {
                    var cardFields = this._getCardFields(record.get('cardFields'));
                    columns[record.get('column')].cardFields = cardFields.join(',');
                }
            }
        }, this);
        //console.log('_buildSettingValue',columns);
        return columns;
    },

    getErrors: function() {
        var errors = [];
        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
            errors.push('At least one column must be shown.');
        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    },

    _getColumnValue: function(columnName) {
        var value = this._value;
        return value && Ext.JSON.decode(value)[columnName];
    },

    refreshWithNewField: function(field) {
        delete this._storeLoaded;
        var previousField = this.fieldName;
        this.fieldName = field && field.name;

        this._refreshMappingEditor(this.modelType);

        field.getAllowedValueStore().load({
            callback: function(records, operation, success) {
                var data = Ext.Array.map(records, this._recordToGridRow, this);
                this._store.loadRawData(data);
                this.fireEvent('ready');
                if (this.fieldName === 'State' || previousField === "State"){
                    //we need to rebuild the grid
                    this._buildGrid();
                }
                this._storeLoaded = true;
            },
            scope: this
        });
    },
    _refreshMappingEditor: function(model){

        if (this._grid && this._grid.columns){
            Ext.Array.each(this._grid.columns, function(c){
                if (c.dataIndex === 'portfolioStateMapping'){ //} && c.editor){
                    c.setEditor(this._getPortfolioStateEditorConfig(model));
                    return false;
                }
            }, this);
        }
    },
    refreshWithNewModel: function(model){
        console.log('refreshWithNewModel', model, this.modelType);
        if (model !== this.modelType){
            console.log('refreshWithNewModel', model, this.modelType,  this.fieldName);
            this._refreshMappingEditor(model);

            //if (this.modelType){
                this.modelType = model;

                this._store.each(function(r){
                    r.set('portfolioStateMapping', '');
                    r.set('portfolioStateName', '');
                    r.save();
                });
            //}

        }

    },
    _recordToGridRow: function(allowedValue) {
        var columnName = allowedValue.get('StringValue');
        var pref = this._store.getCount() === 0 ? this._getColumnValue(columnName) : null;
        //console.log('_recordToGridRow', columnName, pref);

        var column = {
            column: columnName,
            ref: allowedValue.get('_ref') != "null" ? allowedValue.get('_ref') : null,
            type: allowedValue.get('_type'),
            shown: false,
            wip: '',
            portfolioStateMapping: '',
            portfolioStateName: '',
            cardFields: this.defaultCardFields
        };

        if (pref) {

            Ext.apply(column, {
                shown: true,
                wip: pref.wip,
                portfolioStateMapping: pref.portfolioStateMapping,
                portfolioStateName: pref.portfolioStateName
            });

            if (pref.cardFields) {
                Ext.apply(column, {
                    cardFields: pref.cardFields
                });
            }
            //console.log('pref', column);
        }

        return column;

    }
});

Ext.override(Ext.grid.plugin.CellEditing,{

    onEditComplete : function(ed, value, startValue) {
        var me = this,
            activeColumn = me.getActiveColumn(),
            context = me.context,
            record;

        if (activeColumn) {
            record = context.record;
            //Overriding to save the record so we can set the name, too.
            context.editorRecord = me.activeEditor.field && me.activeEditor.field.getRecord &&
                    me.activeEditor.field.getRecord() &&
                    me.activeEditor.field.getRecord().getData() || {value: null, name: "-- No Mapping --" };

            me.setActiveEditor(null);
            me.setActiveColumn(null);
            me.setActiveRecord(null);

            context.value = value;
            if (!me.validateEdit()) {
                me.editing = false;
                return;
            }

            // Only update the record if the new value is different than the
            // startValue. When the view refreshes its el will gain focus
            if (!record.isEqual(value, startValue)) {
                record.set(activeColumn.dataIndex, value);
            }

            // Restore focus back to the view.
            // Use delay so that if we are completing due to tabbing, we can cancel the focus task
            context.view.focusRow(context.rowIdx, 100);
            me.fireEvent('edit', me, context);
            me.editing = false;
        }
    }

});
/**
 * Allows configuring of rows for the cardboard
 *
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'rowsettingsfield',
 *              value: {
 *                  show: true,
 *                  field: 'c_ClassofService'
 *              }
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.apps.common.RowSettingsField', {
    alias: 'widget.rowsettingsfield',
    extend: 'Ext.form.FieldContainer',
    requires: [
        'Rally.ui.CheckboxField',
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.plugin.FieldValidationUi',
        'Rally.data.ModelFactory',
        'Rally.data.wsapi.ModelBuilder'
    ],

    mixins: {
        field: 'Ext.form.field.Field'
    },

    layout: 'hbox',

    cls: 'row-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The row settings value for this field
         */
        value: undefined,

        /**
         * @cfg {Function}
         * A function which should return true if the specified field should
         * be included in the list of available swimlane fields
         * @param {Rally.data.wsapi.Field} field
         */
        isAllowedFieldFn: Ext.emptyFn,

        /**
         * @cfg {Object[]}
         *
         * Array of objects with name and value keys to be used by the row combobox
         * [{'name': 'Blocked', 'value': 'Blocked'},{'name': 'Owner', 'value': 'Owner'}]
         */
        explicitFields: [],

        /**
         * @cfg {String[]}
         * Array of models for which to list fields for
         */
        modelNames: ['portfolioitem/feature'],

        /**
         * @cfg {String[]}
         * Array of field display names to show if found on at least 1 model, sortable and are not hidden
         */
        whiteListFields: []
    },

    initComponent: function() {
        this.callParent(arguments);

        this.mixins.field.initField.call(this);

        this.add([
            {
                xtype: 'rallycheckboxfield',
                name: 'showRows',
                boxLabel: '',
                margin: '0',
                submitValue: false,
                value: this.getValue().showRows,
                listeners: {
                    change: function(checkbox, checked) {
                        this.down('rallycombobox').setDisabled(!checked);
                    },
                    scope: this
                }
            },
            {
                xtype: 'rallycombobox',
                plugins: ['rallyfieldvalidationui'],
                name: 'rowsField',
                margin: '0 6px',
                width: 130,
                emptyText: 'Choose Field...',
                displayField: 'name',
                valueField: 'value',
                disabled: this.getValue().showRows !== 'true',
                editable: false,
                submitValue: false,
                storeType: 'Ext.data.Store',
                storeConfig: {
                    remoteFilter: false,
                    fields: ['name', 'value'],
                    data: []
                }
            }
        ]);

        this._loadModels();
    },

    _loadModels: function() {
        Rally.data.ModelFactory.getModels({
            types: this.getModelNames(),
            context: this.context,
            success: this._onModelsRetrieved,
            scope: this
        });
    },

    _onModelsRetrieved: function (models) {
        var fields = _.uniq(Ext.Array.merge(this.explicitFields, this._getRowableFields(_.values(models))), 'name');
        var combobox = this.down('rallycombobox');
        combobox.getStore().loadData(_.sortBy(fields, 'name'));
        combobox.setValue(this.getValue().rowsField);
        this.fireEvent('ready', this);
    },

    _getRowableFields: function (models) {
        var artifactModel = Rally.data.wsapi.ModelBuilder.buildCompositeArtifact(models, this.context),
            allFields = artifactModel.getFields(),
            rowableFields = _.filter(allFields, function (field) {
                var attr = field.attributeDefinition;
                return attr && !attr.Hidden && attr.Sortable &&
                    ((artifactModel.getModelsForField(field).length === models.length &&
                    this.isAllowedFieldFn(field)) || _.contains(this.whiteListFields, field.displayName));
            }, this);

        return _.map(rowableFields, function(field) {
            return {
                name: field.displayName,
                value: field.name
            };
        });
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {},
            showField = this.down('rallycheckboxfield'),
            rowsField = this.down('rallycombobox'),
            showRows = showField.getValue() && !_.isEmpty(rowsField.getValue());
        data[showField.name] = showRows;
        if (showRows) {
            data[rowsField.name] = rowsField.getValue();
        }
        return data;
    },

    refreshWithNewModelType: function(type) {
        this.setModelNames([type]);
        this._loadModels();
    }
});

Ext.define('Rally.apps.kanban.Settings', {
    singleton: true,
    requires: [
        'Rally.apps.kanban.ColumnSettingsField',
        'Rally.apps.common.RowSettingsField',
        'Rally.ui.combobox.FieldComboBox',
        'Rally.ui.CheckboxField',
        'Rally.ui.plugin.FieldValidationUi'
    ],

    getFields: function (config) {
        var items = [
            {
                name: 'modelType',
                xtype: 'rallyportfolioitemtypecombobox',
                bubbleEvents: ['modelselected'],
                fieldLabel: 'Portfolio Item Type',
                valueField: 'TypePath',
                listeners: {
                    change: function (cb) {
                        if (cb.getRecord() && cb.getRecord().get('TypePath')) {
                            var model = cb.getRecord().get('TypePath');
                            this.fireEvent('modelselected', model);
                        }
                    }
                }
            }, {
                name: 'groupByField',
                xtype: 'rallyfieldcombobox',
                model: Ext.identityFn(config.modelType),
                margin: '10px 0 0 0',
                fieldLabel: 'Columns',
                listeners: {
                    select: function (combo) {
                        this.fireEvent('fieldselected', combo.getRecord().get('fieldDefinition'));
                    },
                    ready: function (combo) {
                        combo.store.filterBy(function (record) {
                            var attr = record.get('fieldDefinition').attributeDefinition;
                            let whitelist = ['c_AuthPortfolioKanban', 'c_NEMOKanbanState', 'c_CFRKanbanState'];
                            // if(attr.AttributeType !== 'OBJECT'){
                            //     console.log('OBJECT>>',record.get('value'));
                            // }
                            // return attr && !attr.ReadOnly && attr.Constrained && attr.AttributeType !== 'OBJECT' && attr.AttributeType !== 'COLLECTION';
                            return _.contains(whitelist, record.get('value')) || (attr && !attr.ReadOnly && attr.Constrained && attr.AttributeType !== 'COLLECTION');
                        });
                        if (combo.getRecord()) {
                            this.fireEvent('fieldselected', combo.getRecord().get('fieldDefinition'));
                        }
                    }
                },
                handlesEvents: {
                    select: function (cb) {

                        if (cb.getRecord() && cb.getRecord().get('TypePath')) {
                            var selectedField = this.getValue();
                            this.refreshWithNewModelType(cb.getRecord().get('TypePath'));
                            this.setValue(selectedField);
                        }

                    },
                    modelselected: function (model) {
                        var selectedField = this.getValue();
                        this.refreshWithNewModelType(model);
                        this.setValue(selectedField);

                    }
                },
                bubbleEvents: ['fieldselected', 'fieldready']
            },

            {
                name: 'columns',
                readyEvent: 'ready',
                fieldLabel: '',
                margin: '5px 0 0 80px',
                xtype: 'kanbancolumnsettingsfield',
                shouldShowColumnLevelFieldPicker: config.shouldShowColumnLevelFieldPicker,
                defaultCardFields: config.defaultCardFields,
                modelType: config.modelType,
                handlesEvents: {
                    fieldselected: function (field) {
                        this.refreshWithNewField(field);
                    },
                    modelselected: function (model) {
                        this.refreshWithNewModel(model);
                    }
                },
                listeners: {
                    ready: function () {
                        this.fireEvent('columnsettingsready');
                    }
                },
                bubbleEvents: 'columnsettingsready'
            }
        ];

        items.push({
            name: 'groupHorizontallyByField',
            xtype: 'rowsettingsfield',
            fieldLabel: 'Swimlanes',
            margin: '10 0 0 0',
            mapsToMultiplePreferenceKeys: ['showRows', 'rowsField'],
            readyEvent: 'ready',
            isAllowedFieldFn: function (field) {
                var attr = field.attributeDefinition;
                console.log('field', field.name, attr);
                return (attr.Custom && (attr.Constrained || attr.AttributeType.toLowerCase() !== 'string') ||
                    attr.Constrained || field.name === "Parent" || _.contains(['boolean'], attr.AttributeType.toLowerCase())) &&
                    !_.contains(['web_link', 'text', 'date'], attr.AttributeType.toLowerCase());
            },
            explicitFields: [
                { name: 'Sizing', value: 'PlanEstimate' }
            ]
        });

        let model = Rally.getApp().getSetting('modelType');

        items.push(
            {
                name: 'hideReleasedCards',
                xtype: 'rallycheckboxfield',
                fieldLabel: 'Options',
                margin: '10 0 0 0',
                boxLabel: 'Hide cards in last visible column if assigned to a release',
                disabled: model && model.toLowerCase().indexOf('feature') === -1,
                handlesEvents: {
                    modelselected: function (model) {
                        if (model && model.toLowerCase().indexOf('feature') > -1) {
                            this.enable();
                        }
                        else {
                            this.disable();
                        }
                    }
                }
            },
            {
                type: 'cardage',
                config: {
                    fieldLabel: '',
                    margin: '5 0 10 80'
                }
            },
            {
                type: 'query'
            });

        return items;
    }
});
Ext.define('RallyTechServices.portfolioalternatekanbanboard.Toolbox',{
    fetchObjectByRef: function(ref){
        var refParts = ref.split('/');
        Ext.create('Rally.data.wsapi.Store',{
            model: refParts[0],
            fetch: true,
            filters: [{
                property: 'ObjectID',
                value: refParts[1]
            }]
        }).load({
            callback: function(records, operation){
                console.log('records', records);
            }
        });
    }
});
Ext.define("TSPortfolioKanbanAlternateFieldApp", {
    extend: 'Rally.app.App',
    requires: [
        'Rally.apps.kanban.Settings',
        'Rally.apps.kanban.Column',
        'Rally.ui.gridboard.GridBoard',
        'Rally.ui.gridboard.plugin.GridBoardAddNew',
        'Rally.ui.gridboard.plugin.BoardPolicyDisplayable',
        'Rally.ui.cardboard.plugin.ColumnPolicy',
        'Rally.ui.cardboard.PolicyContainer',
        'Rally.ui.cardboard.CardBoard',
        'Rally.ui.cardboard.plugin.Scrollable',
        'Rally.ui.report.StandardReport',
        'Rally.clientmetrics.ClientMetricsRecordable',
        'Rally.ui.gridboard.plugin.GridBoardCustomFilterControl',
        'Rally.ui.gridboard.plugin.GridBoardFieldPicker',
        'Rally.ui.cardboard.plugin.FixedHeader'
    ],
    mixins: [
        'Rally.clientmetrics.ClientMetricsRecordable'
    ],
    cls: 'kanban',
    logger: new Rally.technicalservices.Logger(),

    appName: 'Kanban',

    settingsScope: 'project',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    items: [{
        id: Utils.AncestorPiAppFilter.RENDER_AREA_ID,
        xtype: 'container',
        layout: {
            type: 'hbox',
            align: 'middle',
            defaultMargins: '0 10 10 0',
        }
    }, {
        id: Utils.AncestorPiAppFilter.PANEL_RENDER_AREA_ID,
        xtype: 'container',
        layout: {
            type: 'hbox',
            align: 'middle',
            defaultMargins: '0 10 10 0',
        }
    }, {
        id: 'grid-area',
        itemId: 'grid-area',
        xtype: 'container',
        flex: 1,
        type: 'vbox',
        align: 'stretch'
    }],

    config: {
        defaultSettings: {
            groupByField: 'InvestmentCategory',
            showRows: false,
            columns: Ext.JSON.encode({
                None: { wip: '' }
            }),
            cardFields: 'FormattedID,Name,Owner,Discussion',
            hideReleasedCards: false,
            showCardAge: true,
            cardAgeThreshold: 3,
            pageSize: 25,
            modelType: null,
            firstLoad: true // Used to merge old inline filter values the first time the new version is loaded
        }
    },

    launch: function () {
        var modelType = this.getSetting('modelType');
        this.filterDeferred = Ext.create('Deft.Deferred');
        this.gridArea = this.down('#grid-area');

        this.ancestorFilterPlugin = Ext.create('Utils.AncestorPiAppFilter', {
            ptype: 'UtilsAncestorPiAppFilter',
            pluginId: 'ancestorFilterPlugin',
            displayMultiLevelFilter: true,
            visibleTab: modelType,
            listeners: {
                scope: this,
                ready(plugin) {
                    plugin.addListener({
                        scope: this,
                        select: this._addCardboardContent,
                        change: this._addCardboardContent
                    });

                    if (this.getSetting('firstLoad')) {
                        plugin.mergeLegacyFilter(plugin.getMultiLevelFilterStates(), Ext.state.Manager.get(this.getContext().getScopedStateId('kanban-filter')), modelType, true);

                        this.updateSettingsValues({
                            settings: {
                                firstLoad: false
                            }
                        });

                        setTimeout(() => this.filterDeferred.resolve(false), 1000);
                    }

                    else {
                        this.filterDeferred.resolve(true);
                    }
                },
            }
        });
        this.addPlugin(this.ancestorFilterPlugin);

        if (!modelType) {
            this.gridArea.add({
                xtype: 'container',
                html: '<div class="no-data-container">Please set up the configuration settings in the board.<div class="secondary-message">'
            });
            return;
        }

        this.gridArea.on('resize', this.resizeBoard, this);

        this.setLoading(true);

        Rally.data.ModelFactory.getModel({
            type: modelType,
            success: this._onModelRetrieved,
            scope: this
        });
    },

    resizeBoard: function () {
        let gridboard = this.down('rallygridboard');
        if (this.gridArea && gridboard) {
            gridboard.setHeight(this.gridArea.getHeight())
        }
    },

    getOptions: function () {
        return [
            {
                text: 'Print',
                handler: this._print,
                scope: this
            }
        ];
    },

    getSettingsFields: function () {
        return Rally.apps.kanban.Settings.getFields({
            shouldShowColumnLevelFieldPicker: this._shouldShowColumnLevelFieldPicker(),
            defaultCardFields: this.getSetting('cardFields'),
            modelType: this.getSetting('modelType')
        });
    },

    /**
     * Called when any timebox scope change is received.
     * @protected
     * @param {Rally.app.TimeboxScope} timeboxScope The new scope
     */
    onTimeboxScopeChange: function () {
        this.callParent(arguments);
        this._addCardboardContent();
    },

    _shouldShowColumnLevelFieldPicker: function () {
        return this.getContext().isFeatureEnabled('COLUMN_LEVEL_FIELD_PICKER_ON_KANBAN_SETTINGS');
    },

    _onModelRetrieved: function (model) {
        this.logger.log("_onModelRetrieved", model);

        this.modelTypePath = model.typePath;
        this.groupByField = model.getField(this.getSetting('groupByField'));

        this.filterDeferred.promise.then({
            success(addContent) {
                if (addContent) {
                    this._addCardboardContent();
                }
            },
            scope: this
        });
    },

    _addCardboardContent: async function () {
        this.logger.log('_addCardboardContent');

        this.setLoading(true);
        let status = this.cancelPreviousLoad();

        if (this.gridboard) { this.gridboard.destroy(); }

        var cardboardConfig = this._getCardboardConfig();
        let gridboardConfig = await this._getGridboardConfig(cardboardConfig, status);

        if (status.cancelLoad) {
            return;
        }

        var columnSetting = this._getColumnSetting();

        if (columnSetting) {
            cardboardConfig.columns = this._getColumnConfig(columnSetting);
        }

        this.logger.log('config:', gridboardConfig);

        if (!this.rendered) {
            this.on('render', function () {
                if (!status.cancelLoad) {
                    this.gridboard = this.gridArea.add(gridboardConfig);
                }
            }, this);
        } else {
            this.gridboard = this.gridArea.add(gridboardConfig);
        }
    },

    _getGridboardConfig: async function (cardboardConfig, status) {
        var context = this.getContext(),
            modelNames = this._getDefaultTypes(),
            blacklist = ['Successors', 'Predecessors', 'DisplayColor'],
            // height = this.gridArea.getHeight(),
            typeName = modelNames[0].replace('PortfolioItem/', '');

        let dataContext = context.getDataContext();

        if (this.searchAllProjects()) {
            dataContext.project = null;
        }

        let filters = await this._getFilters(status);

        return {
            xtype: 'rallygridboard',
            stateful: false,
            toggleState: 'board',
            cardBoardConfig: cardboardConfig,
            plugins: [
                {
                    ptype: 'rallygridboardaddnew',
                    addNewControlConfig: {
                        margin: '0 15 0 0',
                        fieldLabel: "New " + typeName,
                        listeners: {
                            beforecreate: this._onBeforeCreate,
                            beforeeditorshow: this._onBeforeEditorShow,
                            scope: this
                        },
                        stateful: true,
                        stateId: context.getScopedStateId('kanban-add-new')
                    }
                },
                {
                    ptype: 'rallygridboardinlinefiltercontrol',
                    inlineFilterButtonConfig: {
                        stateful: true,
                        stateId: context.getScopedStateId('kanban-filter-hidden'),
                        hidden: true,
                        modelNames: modelNames,
                        margin: '3 9 3 30',
                        inlineFilterPanelConfig:
                        {
                            collapsed: false,
                            hidden: true,
                            quickFilterPanelConfig: {
                                hidden: true,
                                defaultFields: [],
                                addQuickFilterConfig: {
                                    whiteListFields: ['Tags', 'Milestones', 'c_EnterpriseApprovalEA', 'c_EAEpic']
                                }
                            }
                        }
                    }
                },
                {
                    ptype: 'rallygridboardfieldpicker',
                    headerPosition: 'left',
                    boardFieldBlackList: blacklist,
                    modelNames: modelNames,
                    boardFieldDefaults: this.getSetting('cardFields').split(',')
                },
                {
                    ptype: 'rallyboardpolicydisplayable',
                    prefKey: 'kanbanAgreementsChecked',
                    checkboxConfig: {
                        boxLabel: 'Show Agreements'
                    }
                }
            ],
            context: context,
            modelNames: modelNames,
            storeConfig: {
                filters,
                context: dataContext,
                enablePostGet: true
            },
            // height: height
        };
    },

    _getColumnConfig: function (columnSetting) {
        var columns = [];
        Ext.Object.each(columnSetting, function (column, values) {
            var columnConfig = {
                xtype: 'kanbancolumn',
                enableWipLimit: true,
                wipLimit: values.wip,
                plugins: [{
                    ptype: 'rallycolumnpolicy',
                    app: this
                }],
                value: values.type == 'state' || column == "" ? values.ref : column,
                columnHeaderConfig: {
                    headerTpl: column || 'None'
                },
                listeners: {
                    invalidfilter: {
                        fn: this._onInvalidFilter,
                        scope: this
                    }
                }
            };
            if (this._shouldShowColumnLevelFieldPicker()) {
                columnConfig.fields = this._getFieldsForColumn(values);
            }
            columns.push(columnConfig);
        }, this);

        columns[columns.length - 1].hideReleasedCards = this.getSetting('hideReleasedCards');

        return columns;
    },

    _getFieldsForColumn: function (values) {
        var columnFields = [];
        if (this._shouldShowColumnLevelFieldPicker()) {
            if (values.cardFields) {
                columnFields = values.cardFields.split(',');
            } else if (this.getSetting('cardFields')) {
                columnFields = this.getSetting('cardFields').split(',');
            }
        }
        return columnFields;
    },

    _onInvalidFilter: function () {
        this.showError('Invalid query: ' + this.getSetting('query'));
    },

    _getCardboardConfig: function () {
        let context = this.getContext().getDataContext();

        if (this.searchAllProjects()) {
            context.project = null;
        }

        var config = {
            xtype: 'rallycardboard',
            plugins: [
                { ptype: 'rallycardboardprinting', pluginId: 'print' },
                {
                    ptype: 'rallyscrollablecardboard',
                    containerEl: this.getEl()
                },
                { ptype: 'rallyfixedheadercardboard' }
            ],
            types: this._getDefaultTypes(),
            attribute: this.getSetting('groupByField'),
            margin: '10px',
            context: this.getContext(),
            listeners: {
                beforecarddroppedsave: this._onBeforeCardSaved,
                load: this._onBoardLoad,
                cardupdated: this._publishContentUpdatedNoDashboardLayout,
                scope: this
            },
            columnConfig: {
                xtype: 'rallycardboardcolumn',
                enableWipLimit: true
            },
            cardConfig: {
                editable: true,
                showIconMenus: true,
                showAge: this.getSetting('showCardAge') ? this.getSetting('cardAgeThreshold') : -1,
                showBlockedReason: true
            },
            storeConfig: {
                context,
                enablePostGet: true
            }
        };

        if (this.getSetting('showRows')) {
            Ext.merge(config, {
                rowConfig: {
                    field: this.getSetting('rowsField'),
                    sortDirection: 'ASC'
                }
            });
        }

        return config;
    },

    _getFilters: async function (status) {
        var filters = [];

        if (this.getSetting('query')) {
            filters.push(Rally.data.QueryFilter.fromQueryString(this.getSetting('query')));
        }

        if (this.getContext().getTimeboxScope()) {
            filters.push(this.getContext().getTimeboxScope().getQueryFilter());
        }

        let ancestorAndMultiFilters = await this.ancestorFilterPlugin.getAllFiltersForType(this.modelTypePath, true).catch((e) => {
            this.showError(e, 'Failed while loading filters');
            status.cancelLoad = true;
            this.setLoading(false);
        });

        if (ancestorAndMultiFilters) {
            filters = filters.concat(ancestorAndMultiFilters);
        }
        return filters;
    },

    cancelPreviousLoad: function () {
        if (this.globalStatus) {
            this.globalStatus.cancelLoad = true;
        }

        let newStatus = { cancelLoad: false };
        this.globalStatus = newStatus;
        return newStatus;
    },

    _getColumnSetting: function () {
        var columnSetting = this.getSetting('columns');
        return columnSetting && Ext.JSON.decode(columnSetting);
    },
    _print: function () {
        this.gridboard.getGridOrBoard().openPrintPage({ title: 'Kanban Board' });
    },

    _getDefaultTypes: function () {
        return [this.getSetting('modelType')];
        //        return ['User Story', 'Defect'];
    },

    _buildStandardReportConfig: function (reportConfig) {
        var scope = this.getContext().getDataContext();
        return {
            xtype: 'rallystandardreport',
            padding: 10,
            project: scope.project,
            projectScopeUp: scope.projectScopeUp,
            projectScopeDown: scope.projectScopeDown,
            reportConfig: reportConfig
        };
    },

    _showReportDialog: function (title, reportConfig) {
        var height = 450, width = 600;
        this.getEl().mask();
        Ext.create('Rally.ui.dialog.Dialog', {
            title: title,
            autoShow: true,
            draggable: false,
            closable: true,
            modal: false,
            height: height,
            width: width,
            items: [
                Ext.apply(this._buildStandardReportConfig(reportConfig),
                    {
                        height: height,
                        width: width
                    })
            ],
            listeners: {
                close: function () {
                    this.getEl().unmask();
                },
                scope: this
            }
        });
    },

    _onBoardLoad: function () {
        this._publishContentUpdated();
        this.setLoading(false);
        this.resizeBoard();
    },

    _onBeforeCreate: function (addNew, record, params) {
        Ext.apply(params, {
            rankTo: 'BOTTOM',
            rankScope: 'BACKLOG'
        });
        record.set(this.getSetting('groupByField'), this.gridboard.getGridOrBoard().getColumns()[0].getValue());
    },

    _onBeforeEditorShow: function (addNew, params) {
        params.rankTo = 'BOTTOM';
        params.rankScope = 'BACKLOG';
        params.iteration = 'u';

        var groupByFieldName = this.groupByField.name;

        params[groupByFieldName] = this.gridboard.getGridOrBoard().getColumns()[0].getValue();
    },

    _onBeforeCardSaved: function (column, card, type) {
        var columnSetting = this._getColumnSetting();
        if (columnSetting) {
            var setting = columnSetting[column.getValue() || ""];
            if (setting && (setting.portfolioStateMapping || setting.portfolioStateMapping === "")) {
                card.getRecord().set('State', setting.portfolioStateMapping);
            }
        }
    },

    searchAllProjects() {
        return this.ancestorFilterPlugin.getIgnoreProjectScope();
    },

    showError(msg, defaultMsg) {
        Rally.ui.notify.Notifier.showError({ message: this.parseError(msg, defaultMsg) });
    },

    parseError(e, defaultMessage) {
        defaultMessage = defaultMessage || 'An error occurred while loading the report';

        if (typeof e === 'string' && e.length) {
            return e;
        }
        if (e.message && e.message.length) {
            return e.message;
        }
        if (e.exception && e.error && e.error.errors && e.error.errors.length) {
            if (e.error.errors[0].length) {
                return e.error.errors[0];
            } else {
                if (e.error && e.error.response && e.error.response.status) {
                    return `${defaultMessage} (Status ${e.error.response.status})`;
                }
            }
        }
        if (e.exceptions && e.exceptions.length && e.exceptions[0].error) {
            return e.exceptions[0].error.statusText;
        }
        return defaultMessage;
    },

    setLoading(msg) {
        this.gridArea.setLoading(msg);
    },

    _publishContentUpdated: function () {
        this.fireEvent('contentupdated');
        if (Rally.BrowserTest) {
            Rally.BrowserTest.publishComponentReady(this);
        }
        this.recordComponentReady({
            miscData: {
                swimLanes: this.getSetting('showRows'),
                swimLaneField: this.getSetting('rowsField')
            }
        });
    },

    _publishContentUpdatedNoDashboardLayout: function () {
        this.fireEvent('contentupdated', { dashboardLayout: false });
    },

    isExternal: function () {
        return typeof (this.getAppId()) == 'undefined';
    },
});

            
               Rally.launchApp('TSPortfolioKanbanAlternateFieldApp', {
                   name: 'Portfolio Kanban Using Alternate Field'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.portfolio-kanban {
    overflow-y: hidden;
}

.portfolio-kanban .no-type-text {
    text-align: center;
}

.portfolio-kanban .typeCombo {
    float: right;
}

.portfolio-kanban .readyIndicator {
    visibility: hidden;
}

.portfolio-kanban .timeInState {
    border-top: 1px dotted #CCC;
    color: #666;
    margin-top: 5px;
    padding-top: 5px;
}

.portfolio-kanban .showPolicies {
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-weight: normal;
    float: right;
    margin: 1px 10px 6px 0;
}

.portfolio-kanban .showPolicies  label {
    position: relative;
    top: 1px;
    margin-top: 0;
    padding-left: 4px;
}

.portfolio-kanban .showPolicies .showPoliciesCheckbox {
    position: relative;
    margin-top: 0;
}

.portfolio-kanban .settingsHeader {
    float: left;
    color: gray;
    padding: 1px 0 0 10px;
}

.portfolio-kanban .settingsHeader b {
    padding-right: 5px;
}

.portfolio-kanban .help-field {
    float: right;
}

.portfolio-kanban .field-picker-btn {
    height: 22px;
    margin-top: 3px;
}

.rui-card .rui-card-content .status-content>.status-field{
  background-color: white;
  border: none;
}

.timeInState {
  border-top: 1px dotted #CCC;
  color: #666;
  margin-top: 5px;
  padding-top: 5px;
}

.blue-tabs .x-tab-bar .x-tab-default {
  background-color: white;
  border-radius: 4px 4px 0 0;
}

.blue-tabs .x-tab-bar .x-tab-default .x-tab-inner {
  color: #00a9e0;
}

.blue-tabs .x-tab-bar .x-tab-active {
  background-color: #00a9e0;
}

.blue-tabs .x-tab-bar .x-tab-active .x-tab-inner {
  color: white;
}

.blue-tabs .x-tab-bar .x-tab-default .x-tab-inner {
  text-overflow: initial;
  -o-text-overflow: initial;
  overflow: initial;
}

.blue-tabs .x-tab-bar .x-tab-inner {
  width: 100%;
}

.blue-tabs .x-tab-bar .x-tab-default .x-tab-icon-el {
  color: white;
}

.filter-help { 
  border-color: #d6d6d6 !important;
}

.icon-help {
  font-size: 16px;
  text-align: center;
  color: #327c98 !important;
}

.icon-help:hover {
  color: #21516d !important;
}

.filter-help .x-btn-button {
  height: 18px !important;
  width: 18px !important;
}

.filter-help-list li{
  padding-bottom: 6px;
}
    </style>

</head>
<body></body>
</html>